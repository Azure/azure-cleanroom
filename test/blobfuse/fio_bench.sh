#!/bin/bash
set -e

# Each test will be performed 3 times
iterations=3

# Name of tests we are going to perform
test_name=$1

# Mount path for blobfuse backed by encryptor
mount_dir=$2

# Mount path for blobfuse backed by storage 
mount_dir_plain=$3

# Temp directory for blobfuse
temp_dir=$4

# Temp directory for blobfuse backed by storage
temp_dir_plain=$5

# Config file for blobfuse
config_file=$6

# Config file for blobfuse backed by storage
config_file_plain=$7


# Directory where output logs will be generated by fio
mkdir -p ./perf-results
output="./perf-results/${test_name}"

# --------------------------------------------------------------------------------------------------
# Method to unmount blobfuse with retry logic
retry_unmount() {
  set +e
  local retries=3
  local count=0
  while [ $count -lt $retries ]; do
    blobfuse2 unmount all
    unmount_status=$?
    if [ $unmount_status -eq 0 ]; then
      break
    else
      echo "Failed to unmount, retrying in 20 seconds..."
      sleep 20
      count=$((count + 1))
    fi
  done

  set -e
  if [ $unmount_status -ne 0 ]; then
    echo "Failed to unmount after $retries attempts"
    exit 1
  fi
}

# --------------------------------------------------------------------------------------------------
# Method to mount blobfuse with encryption and wait for system to stabilize
mount_blobfuse_with_encryptor() {
  set +e

  export BLOBFUSE_PLUGIN_PATH=./encryptor.so

  blobfuse2 mount ${mount_dir} --config-file=${config_file}
  mount_status=$?
  set -e
  if [ $mount_status -ne 0 ]; then
    echo "Failed to mount file system with encryptor"
    exit 1
  else
    echo "File system with encryptor mounted successfully on ${mount_dir}"
  fi
  sleep 5

  unset BLOBFUSE_PLUGIN_PATH
  set +e
  blobfuse2 mount ${mount_dir_plain} --config-file=${config_file_plain}

  set -e
  mount_status=$?
  if [ $mount_status -ne 0 ]; then
    echo "Failed to mount file system with storage"
    exit 1
  else
    echo "File system with storage mounted successfully on ${mount_dir_plain}"
  fi

  # Wait for daemon to come up and stablise
  sleep 20

  df -h | grep blobfuse
  df_status=$?
  if [ $df_status -ne 0 ]; then
    echo "Failed to find blobfuse mount"
    exit 1
  else
    echo "File system stable now on ${mount_dir}"
  fi
}

# --------------------------------------------------------------------------------------------------
# Method to execute fio command for a given config file and generate summary result
execute_test() {
  job_file=$1

  job_name=$(basename "${job_file}")
  job_name="${job_name%.*}"

  echo -n "Running job ${job_name} for ${iterations} iterations... "

  for i in $(seq 1 $iterations);
  do
    echo -n "${i};"
    set +e

    timeout 30m fio --thread \
      --output=${output}/${job_name}trial${i}.json \
      --output-format=json \
      --directory=${mount_dir} \
      --eta=never \
      ${job_file}

    job_status=$?
    set -e
    if [ $job_status -ne 0 ]; then
      echo "Job ${job_name} failed : ${job_status}"
      exit 1
    fi

    if [[ ${test_name} != "read" ]] ; then
      rm -rf ${mount_dir}/*
    fi

    rm -rf ${temp_dir}/*
    rm -rf ${temp_dir_plain}/*
  done

  # From the fio output get the bandwidth details and put it in a summary file
  jq -n 'reduce inputs.jobs[] as $job (null; .name = $job.jobname | .len += 1 | .value += (if ($job."job options".rw == "read")
      then $job.read.bw / 1024
      elif ($job."job options".rw == "randread") then $job.read.bw / 1024
      elif ($job."job options".rw == "randwrite") then $job.write.bw / 1024
      else $job.write.bw / 1024 end)) | {name: .name, value: (.value / .len), unit: "MiB/s"}' ${output}/${job_name}trial*.json | tee ${output}/${job_name}_bandwidth_summary.json

  # From the fio output get the latency details and put it in a summary file
  jq -n 'reduce inputs.jobs[] as $job (null; .name = $job.jobname | .len += 1 | .value += (if ($job."job options".rw == "read")
      then $job.read.lat_ns.mean / 1000000
      elif ($job."job options".rw == "randread") then $job.read.lat_ns.mean / 1000000
      elif ($job."job options".rw == "randwrite") then $job.write.lat_ns.mean / 1000000
      else $job.write.lat_ns.mean / 1000000 end)) | {name: .name, value: (.value / .len), unit: "milliseconds"}' ${output}/${job_name}trial*.json | tee ${output}/${job_name}_latency_summary.json
}

# --------------------------------------------------------------------------------------------------
# Method to iterate over fio files in given directory and execute each test
iterate_fio_files() {
  jobs_dir=$1
  job_type=$(basename "${jobs_dir}")

  for job_file in "${jobs_dir}"/*.fio; do
    job_name=$(basename "${job_file}")
    job_name="${job_name%.*}"
    
    rm -rf ${temp_dir}/*
    rm -rf ${temp_dir_plain}/*
    mount_blobfuse_with_encryptor
    execute_test $job_file
    sleep 20
    retry_unmount

  done
}

# --------------------------------------------------------------------------------------------------
# Method to prepare the system for test
prepare_system() {
  retry_unmount
  
  mkdir -p ${mount_dir}
  mkdir -p ${mount_dir_plain}
  mkdir -p ${temp_dir}
  mkdir -p ${temp_dir_plain}

  mkdir -p ${output}
}


# --------------------------------------------------------------------------------------------------
# Prepare the system for test
prepare_system

# --------------------------------------------------------------------------------------------------
executed=1
if [[ ${test_name} == "write" ]] 
then
  # Execute write benchmark using fio
  echo "Running Write test cases"
  iterate_fio_files "./fio-config/write" 
  
elif [[ ${test_name} == "read" ]] 
then
  # Execute read benchmark using fio
  echo "Running Read test cases"
  iterate_fio_files "./fio-config/read" 
elif [[ ${test_name} == "highlyparallel" ]] 
then
  # Execute multi-threaded benchmark using fio
  echo "Running Highly Parallel test cases"
  iterate_fio_files "./perf_testing/config/high_threads"
elif [[ ${test_name} == "create" ]] 
then
  iterations=1

  # Pre creation cleanup
  mount_blobfuse_with_encryptor
  echo "Deleting old data"
  cd ${mount_dir}
  find . -name "create_1000_files_in_10_threads*" -delete  
  find . -name "create_1000_files_in_100_threads*" -delete  
  cd -
  retry_unmount

  # Execute file create tests
  echo "Running Create test cases"
  iterate_fio_files "./fio-config/create" 
elif [[ ${test_name} == "list" ]] 
then 
  
  # Execute file listing tests
  echo "Running File listing test cases"
  list_files 
  
  # No need to generate bandwidth or latecy related reports in this case
  executed=0 
elif [[ ${test_name} == "app" ]] 
then  
  # App based read/write tests being executed
  # This is done using a python script which read/write in sequential order
  echo "Running App based tests"
  read_write_using_app

  # No need to generate bandwidth or latecy related reports in this case
  executed=0
elif [[ ${test_name} == "rename" ]] 
then

  # Execute rename tests
  echo "Running File rename test cases"
  rename_files
  
  # No need to generate bandwidth or latecy related reports in this case
  executed=0 
else
  executed=0  
  echo "Invalid argument. Please provide either 'read', 'write', 'multi' or 'create' as argument"
fi

# --------------------------------------------------------------------------------------------------
if [[ $executed -eq 1 ]] 
then
  # Merge all results and generate a json summary for bandwidth
  jq -n '[inputs]' ${output}/*_bandwidth_summary.json | tee ./${output}/bandwidth_results.json

  # Merge all results and generate a json summary for latency
  jq -n '[inputs]' ${output}/*_latency_summary.json | tee ./${output}/latency_results.json
fi

# --------------------------------------------------------------------------------------------------
