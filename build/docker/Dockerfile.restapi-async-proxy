# Use the official .NET Core SDK as the base image
FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build

# Set the working directory
WORKDIR /app

# copy csproj and restore as distinct layers
# https://blog.nimbleways.com/docker-build-caching-for-dotnet-applications-done-right-with-dotnet-subset/
COPY Directory.Packages.props /app
COPY Directory.Build.props /app
COPY src/tools/restapi-async-proxy/*.sln /app/src/tools/restapi-async-proxy/
COPY src/internal/restapi-common/*.csproj /app/src/internal/restapi-common/
COPY src/tools/restapi-async-proxy/*.csproj /app/src/tools/restapi-async-proxy/
RUN dotnet restore /app/src/tools/restapi-async-proxy/restapi-async-proxy.sln

# copy everything else and build app
COPY stylecop.json /app
COPY Menees.Analyzers.Settings.xml /app
COPY .editorconfig /app
COPY src/internal/restapi-common /app/src/internal/restapi-common
COPY src/tools/restapi-async-proxy /app/src/tools/restapi-async-proxy

# Publish the application
RUN dotnet publish -c Release --no-restore -o /app/publish /app/src/tools/restapi-async-proxy/restapi-async-proxy.csproj

# Use the official .NET Core runtime as the base image for the final stage
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime

RUN apt-get update && apt-get install -y curl

# Set the working directory
WORKDIR /app

# Copy the published output from the build stage to the runtime stage
COPY --from=build /app/publish .

# Set the entry point for the container
ENTRYPOINT ["dotnet", "restapi-async-proxy.dll"]