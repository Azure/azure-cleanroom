name: "PR Validation: CCF Provider"

on:
  workflow_call:

permissions:
  id-token: write
  contents: read  # This is required for actions/checkout
  checks: write   # This is required to generate the test report


# # When a new revision is pushed to a PR, cancel all in-progress CI runs for that
# # PR. See https://docs.github.com/en/actions/using-jobs/using-concurrency
# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
#   cancel-in-progress: true

jobs:
  docker-operator-recovery:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    strategy:
      matrix:
        key-store: [localfs, akv]
      # Prevent Github from cancelling other jobs of the matrix if one of them fails.
      fail-fast: false
    env:
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy local virtual CCF network via CCF provider
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType virtual
          -nodeCount 3
          -keyStoreType ${{ matrix.key-store }}
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1
  
      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a local virtual CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump ccf logs
        shell: pwsh
        if: ${{ failure() }}
        run: pwsh ./samples/ccf/azcli/copy-docker-logs.ps1 -destinationFolder -

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover local virtual CCF network via operator recovery
        run: pwsh ./samples/ccf/azcli/recover-ccf.ps1 -nodeCount 3

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

  docker-confidential-recovery:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    strategy:
      matrix:
        key-store: [localfs, akv]
      # Prevent Github from cancelling other jobs of the matrix if one of them fails.
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy local virtual CCF network via CCF provider
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType virtual
          -nodeCount 3
          -confidentialRecovery
          -keyStoreType ${{ matrix.key-store }}
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

      - name: Test CGS sample on a local virtual CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump ccf logs
        shell: pwsh
        if: ${{ failure() }}
        run: pwsh ./samples/ccf/azcli/copy-docker-logs.ps1 -destinationFolder -

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover local virtual CCF network via confidential recovery
        run: pwsh ./samples/ccf/azcli/recover-ccf.ps1 -nodeCount 3 -confidentialRecovery

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

  docker-confidential-recovery-onestep:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    strategy:
      matrix:
        key-store: [localfs, akv]
      # Prevent Github from cancelling other jobs of the matrix if one of them fails.
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy local virtual CCF network via CCF provider
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType virtual
          -nodeCount 3
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -useServiceCertDiscovery
          -keyStoreType ${{ matrix.key-store }}
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

      - name: Test CGS sample on a local virtual CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump ccf logs
        shell: pwsh
        if: ${{ failure() }}
        run: pwsh ./samples/ccf/azcli/copy-docker-logs.ps1 -destinationFolder -

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover local virtual CCF network via confidential recovery
        run: pwsh ./samples/ccf/azcli/recover-ccf.ps1 -nodeCount 3 -confidentialRecovery -oneStepRecovery

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

  docker-confidential-recovery-consortium-manager:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    strategy:
      matrix:
        key-store: [localfs, akv]
      # Prevent Github from cancelling other jobs of the matrix if one of them fails.
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy local virtual CCF network via CCF provider
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType virtual
          -nodeCount 3
          -confidentialRecovery
          -useConsortiumManager
          -keyStoreType ${{ matrix.key-store }}
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

      - name: Dump ccf-consortium-manager logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-consortium-manager/type=consortium-manager"

      - name: Test CGS sample on a local virtual CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump ccf logs
        shell: pwsh
        if: ${{ failure() }}
        run: pwsh ./samples/ccf/azcli/copy-docker-logs.ps1 -destinationFolder -

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover local virtual CCF network via confidential recovery
        run: pwsh ./samples/ccf/azcli/recover-ccf.ps1 -nodeCount 3 -confidentialRecovery

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Dump ccf-recovery-agent logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-network/type=recovery-agent"

      - name: Dump ccf-recovery-service logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-recovery-service/type=recovery-service"

      - name: Dump ccf-consortium-manager logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: pwsh ./samples/ccf/azcli/show-docker-logs.ps1 -label "ccf-consortium-manager/type=consortium-manager"

  caci-operator-recovery:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci 
          -nodeCount 1
          -securityPolicyCreationOption cached-debug
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover single node CACI CCF network via operator recovery in one step
        run: >
          pwsh ./samples/ccf/azcli/recover-ccf.ps1
          -oneStepRecovery
          -nodeCount 1
          -securityPolicyCreationOption cached-debug

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Upgrade single node CACI CCF network via scale up
        run: >
          pwsh ./samples/ccf/azcli/test-ccf-upgrade-via-scale-up.ps1

      - name: Validate CGS state after upgrade (scale up)
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-confidential-recovery:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -securityPolicyCreationOption cached-debug
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover single node CACI CCF network via confidential recovery
        run: >
          pwsh ./samples/ccf/azcli/recover-ccf.ps1
          -nodeCount 1
          -confidentialRecovery
          -securityPolicyCreationOption cached-debug

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-confidential-recovery-ccf-upgrade:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        # Passing -NoTest to avoid scale up testing to save time. Other tests cover it.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -NoTest
          -securityPolicyCreationOption cached-debug
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Upgrade single node CACI CCF network via confidential recovery
        run: >
          pwsh ./samples/ccf/azcli/test-ccf-upgrade-via-confidential-recovery.ps1

      - name: Validate CGS state after upgrade (recovery)
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Upgrade single node CACI CCF network via scale up
        run: >
          pwsh ./samples/ccf/azcli/test-ccf-upgrade-via-scale-up.ps1

      - name: Validate CGS state after upgrade (scale up)
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after scale up
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-confidential-recovery-recsvc-upgrade:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        # Passing -NoTest to avoid scale up testing to save time. Other tests cover it.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -NoTest
          -securityPolicyCreationOption cached-debug
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Upgrade recovery service and recover single node CACI CCF network
        run: >
          pwsh ./samples/ccf/azcli/test-recovery-service-upgrade.ps1
          -nodeCount 1
          -OneStepRecovery
          -securityPolicyCreationOption cached-debug

      - name: Validate CGS state after upgrade (recovery)
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery service upgrade
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-allow-all-confidential-recovery:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -securityPolicyCreationOption allow-all
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover single node CACI CCF network via confidential recovery
        run: >
          pwsh ./samples/ccf/azcli/recover-ccf.ps1
          -nodeCount 1
          -confidentialRecovery
          -securityPolicyCreationOption allow-all

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-confidential-recovery-onestep:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -securityPolicyCreationOption cached-debug
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -useServiceCertDiscovery
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}
          -location westeurope

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover single node CACI CCF network via confidential recovery in one step
        run: >
          pwsh ./samples/ccf/azcli/recover-ccf.ps1
          -nodeCount 1
          -oneStepRecovery
          -confidentialRecovery
          -securityPolicyCreationOption cached-debug

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"

  caci-confidential-recovery-consortium-manager:
    runs-on: ["self-hosted", "1ES.Pool=azure-cleanroom-public"]
    environment: pr
    env:
        AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
        AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        RUN_ID: ${{ github.run_id }}
        JOB_ID: ${{ github.job }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: ./.github/actions/setup-docker-on-data-disk

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy a CACI CCF network via CCF provider
        # TODO (gsinha): Passing nodeCount as 1 as creating an N node cluster is at times failing to join the start node with an SSL error.
        # Scaling up to N nodes after creating a 1 node network does not hit the issue.
        run: >
          pwsh ./samples/ccf/azcli/deploy-ccf.ps1
          -infraType caci
          -nodeCount 1
          -securityPolicyCreationOption cached-debug
          -confidentialRecovery
          -oneStepConfigureConfidentialRecovery
          -useConsortiumManager
          -registry acr
          -repo ${{ vars.ACR_URL }}
          -tag ${{ github.run_id }}

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump ccf-provider-client logs
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Test CGS sample on a CACI CCF network deployed via CCF provider
        run: pwsh ./samples/ccf/azcli/deploy-cgs.ps1 -registry acr -repo ${{ vars.ACR_URL }} -tag ${{ github.run_id }}

      - name: Dump add-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-add-azure-user-cgs-client-1

      - name: Dump invite-user cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-invite-azure-user-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Recover single node CACI CCF network via confidential recovery
        run: >
          pwsh ./samples/ccf/azcli/recover-ccf.ps1
          -nodeCount 1
          -confidentialRecovery
          -securityPolicyCreationOption cached-debug

      - name: Validate CGS state after recovery
        run: pwsh ./samples/ccf/azcli/validate-cgs-recovery.ps1

      - name: Dump operator cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs ccf-provider-governance-cgs-client-1

      - name: Dump member0 cgs-client logs
        if: ${{ !cancelled() }}
        shell: pwsh
        run: docker logs member0-governance-cgs-client-1

      - name: Dump ccf-provider-client logs after recovery
        shell: pwsh
        if: ${{ !cancelled() }}
        run: docker logs ccf-provider-client-1

      - name: Delete resource groups
        if: success()
        shell: pwsh
        run: ./samples/ccf/azcli/remove-resources.ps1 -tag "github_actions=ccf-network-${{ github.job }}-${{ github.run_id }}"
