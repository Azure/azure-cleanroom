name: PR validation

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - release

permissions:
  contents: read  # This is required for actions/checkout
  checks: write   # This is required to generate the test report
  id-token: write # This is required for generating OIDC access token

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-ccr-containers:
    runs-on: ["self-hosted", "1ES.Pool=ubuntu2204-pool"]
    environment: pr
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
    
      - name: Add docker user
        shell: bash
        run: sudo usermod -aG docker $USER

      - name: Install powershell-yaml
        run: pwsh -Command "Install-Module -Name powershell-yaml -Force"

      # This is needed for az confcom to pull images and compute the cce policy. Without
      # this, cce policy generation fails with: "The current user does not have permission to run Docker."
      - shell: bash
        run: sudo usermod -aG docker $USER

      # build-ccr-digests.ps1 uses confcom.
      - shell: pwsh
        run: |
          az extension add --name confcom -y --allow-preview true
          az version
  
      - name: Docker version
        run: docker version

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ACR_URL }}
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Login to Azure and refresh token
        uses: ./.github/actions/login-to-azure
        env:
          CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          TENANT_ID: ${{ vars.AZURE_TENANT_ID }}

      - name: Login to Cleanroom Build ACR
        shell: bash
        run: az acr login --name cleanroombuild

      - name: Build CCR containers
        run: pwsh ./build/build-ccr-infra-containers.ps1 -tag ${{ github.run_id }} -repo ${{ vars.ACR_URL }} -push

      - name: Build test containers
        run: pwsh ./build/build-test-containers.ps1 -tag ${{ github.run_id }} -repo ${{ vars.ACR_URL }} -push

      - name: Build CGS client containers
        run: pwsh ./build/cgs/build-cgs-client-containers.ps1 -tag ${{ github.run_id }} -repo ${{ vars.ACR_URL }} -push

      - name: Build CGS artefacts
        run: pwsh ./build/cgs/build-cgs-ccf-artefacts.ps1 -tag ${{ github.run_id }} -repo ${{ vars.ACR_URL }} -push

      - name: Build sidecar digests
        run: pwsh ./build/build-ccr-digests.ps1 -tag ${{ github.run_id }} -repo ${{ vars.ACR_URL }} -push

      - uses: actions/upload-artifact@v4
        with:
          name: sidecar-digests.yaml
          path: ./sidecar-digests.yaml
          overwrite: true

      - name: Prepare encrypted testvolmount image
        run: |
          pwsh ./build/build-skopeo.ps1
          docker pull cleanroomregistry.azurecr.io/testvolmount:${{ github.run_id }}
          ACR_TOKEN=$(az acr login -n ${{ vars.PRIVATE_ACR_URL }} --expose-token -o tsv --query accessToken)
          IMAGE_TAG=${{ github.run_id }}
          az keyvault key download --hsm-name cleanroommhsm --name imagekey --encoding PEM --file ./publickey.pem
          ./build/bin/skopeo copy --encryption-key jwe:./publickey.pem docker-daemon:cleanroomregistry.azurecr.io/testvolmount:${{ github.run_id }} docker://${{ vars.PRIVATE_ACR_URL }}/testvolmount:$IMAGE_TAG-jwe --dest-creds 00000000-0000-0000-0000-000000000000:$ACR_TOKEN

  run-tests:
    runs-on: ["self-hosted", "1ES.Pool=ubuntu2204-pool"]
    needs: [build-ccr-containers]
    environment: pr
    env:
      TEST_ENVIRONMENT: PR
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Initialize tests
        shell: pwsh
        env:
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
        run: ./.github/scripts/initialize-tests.ps1 -rgName prtests-${{ github.run_id }}

      - name: test-key-release
        uses: ./.github/actions/run_test
        if: ${{ !cancelled() }}
        env:
          ACR_URL: ${{ vars.ACR_URL }}
          ACR_USERNAME: ${{ vars.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          STORAGE_ACCOUNT_NAME: ${{ vars.TEST_RESULTS_STORAGE_ACCOUNT_NAME }}
          TEST_RESULTS_CONTAINER_NAME: ${{ vars.TEST_RESULTS_CONTAINER_NAME }}
          ACI_RESOURCE_GROUP: prtests-${{ github.run_id }}
          USER_ASSIGNED_IDENTITY: ${{ vars.TEST_USER_ASSIGNED_IDENTITY }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        with:
          id: ${{ github.run_id }}
          test-name: key_release
          container-spec-path: test/scenario/skr/container-spec.json
          dotnet-test-filter: TestCategory=key_release
          test-container-name: test-sidecar
          test-configuration-file: testconfiguration.key_release.json

      - name: test-blobfuse2
        uses: ./.github/actions/run_test
        if: ${{ !cancelled() }}
        env:
          ACR_URL: ${{ vars.ACR_URL }}
          ACR_USERNAME: ${{ vars.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          STORAGE_ACCOUNT_NAME: ${{ vars.TEST_RESULTS_STORAGE_ACCOUNT_NAME }}
          TEST_RESULTS_CONTAINER_NAME: ${{ vars.TEST_RESULTS_CONTAINER_NAME }}
          ACI_RESOURCE_GROUP: prtests-${{ github.run_id }}
          USER_ASSIGNED_IDENTITY: ${{ vars.TEST_USER_ASSIGNED_IDENTITY }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        with:
          id: ${{ github.run_id }}
          test-name: blobfuse2
          container-spec-path: test/scenario/blobfuse2/container-spec.json
          dotnet-test-filter: TestCategory=blobfuse2
          test-container-name: test-sidecar
      
      - name: test-podman
        uses: ./.github/actions/run_test
        if: ${{ !cancelled() }}
        env:
          ACR_URL: ${{ vars.ACR_URL }}
          ACR_USERNAME: ${{ vars.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          STORAGE_ACCOUNT_NAME: ${{ vars.TEST_RESULTS_STORAGE_ACCOUNT_NAME }}
          TEST_RESULTS_CONTAINER_NAME: ${{ vars.TEST_RESULTS_CONTAINER_NAME }}
          ACI_RESOURCE_GROUP: prtests-${{ github.run_id }}
          USER_ASSIGNED_IDENTITY: ${{ vars.TEST_USER_ASSIGNED_IDENTITY }}
          PRIVATE_ACR_URL: ${{ vars.PRIVATE_ACR_URL }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        with:
          id: ${{ github.run_id }}
          test-name: podman
          container-spec-path: test/scenario/podman/container-spec.json
          dotnet-test-filter: TestCategory=podman
          test-container-name: test-sidecar

      - name: test-identity
        uses: ./.github/actions/run_test
        if: ${{ !cancelled() }}
        env:
          ACR_URL: ${{ vars.ACR_URL }}
          ACR_USERNAME: ${{ vars.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          STORAGE_ACCOUNT_NAME: ${{ vars.TEST_RESULTS_STORAGE_ACCOUNT_NAME }}
          TEST_RESULTS_CONTAINER_NAME: ${{ vars.TEST_RESULTS_CONTAINER_NAME }}
          ACI_RESOURCE_GROUP: prtests-${{ github.run_id }}
          USER_ASSIGNED_IDENTITY: ${{ vars.TEST_USER_ASSIGNED_IDENTITY }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        with:
          id: ${{ github.run_id }}
          test-name: identity
          container-spec-path: test/scenario/identity/container-spec.json
          dotnet-test-filter: TestCategory=identity
          test-container-name: test-sidecar
          test-configuration-file: testconfiguration.identity.json

      - name: test-networkegress
        uses: ./.github/actions/run_test
        if: ${{ !cancelled() }}
        env:
          ACR_URL: ${{ vars.ACR_URL }}
          ACR_USERNAME: ${{ vars.ACR_USERNAME }}
          ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
          STORAGE_ACCOUNT_NAME: ${{ vars.TEST_RESULTS_STORAGE_ACCOUNT_NAME }}
          TEST_RESULTS_CONTAINER_NAME: ${{ vars.TEST_RESULTS_CONTAINER_NAME }}
          ACI_RESOURCE_GROUP: prtests-${{ github.run_id }}
          USER_ASSIGNED_IDENTITY: ${{ vars.TEST_USER_ASSIGNED_IDENTITY }}
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        with:
          id: ${{ github.run_id }}
          test-name: network-egress
          container-spec-path: test/scenario/network-egress/container-spec.json
          dotnet-test-filter: TestCategory=network-egress
          test-container-name: test-sidecar

      - name: Cleanup resource group
        run: az group delete --name prtests-${{ github.run_id }} --yes --no-wait

  cleanup-containers:
    runs-on: ["self-hosted", "1ES.Pool=ubuntu2204-pool"]
    needs: [run-tests]
    environment: pr
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ACR_URL }}
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Cleanup container images
        continue-on-error: true
        run: |
          az acr repository delete -n ${{ vars.ACR_URL }} --image identity:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image blobfuse-launcher:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image code-launcher:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image otel-collector:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image ccr-init:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image ccr-governance:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image ccr-attestation:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image ccr-secrets:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image cleanroom-client:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image cgs-constitution:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image cgs-js-app:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image cgs-client:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image cgs-ui:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image testvolmount:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image testclient:${{ github.run_id }} --yes
          az acr repository delete -n ${{ vars.ACR_URL }} --image testnetcon:${{ github.run_id }} --yes
