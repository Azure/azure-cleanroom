<#
// T4 templates are very sensitive to spacing. The overall layout typically looks odd, if the
// generated code is to be properly indented. Thus, nearly every source indent and blank line here
// (or lack thereof) are significant. Be aware that trailing whitespace in a line that ends a
// control block can cause a blank line to appear before the next line.
#>
<#@ include file="Xml.ttinclude" once="true"#><#+
    /// <summary>
    /// Emits enumeration of display name to code.
    /// </summary>
    internal void EmitEnum(List<_XmlNode> nodes, string enumName)
    {
#>
    /// <summary>
    /// Enumeration of display name to code.
    /// </summary>
    public enum <#= enumName #>
    {
<#+
        foreach (var item in nodes)
        {
#>
        <#= item.Name #> = <#= item.Code #>,
<#+
        }
#>
    }
<#+
    }

    /// <summary>
    /// Emits constructors (one per code) that take required parameters and return initialized
    /// object.
    /// </summary>
    internal void EmitConstructors(
        List<_XmlNode> nodes,
        string className,
        string enumName)
    {
#>
    /// <summary>
    /// Constructors (one per code) that take required parameters and return initialized object.
    /// </summary>
    public partial class <#=className#>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="<#=className#>"/> class.
        /// </summary>
        internal <#=className#>(
            <#=enumName#> id,
            Dictionary<string, string> parameters,
            Dictionary<string, string> tags)
        {
            this.Id = id;
            this.Parameters = parameters;
            this.Tags = tags;
            this.Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="<#=className#>"/> class.
        /// </summary>
        /// <remarks>This constructor is used for JSON deserialization.</remarks>
        [JsonConstructor]
        protected <#=className#>()
        {
        }

<#+
        for (int i = 0; i < nodes.Count; i++)
        {
            var item = nodes[i];
            string parameters = string.Empty;
            if (item.Parameters.Any())
            {
                parameters =
                    "string " +
                    string.Join(
                        ", string ",
                        item.Parameters.Select(d => char.ToLower(d[0]) + d.Substring(1)));
            }
#>
        public static <#= className #> <#= item.Name #>(<#= parameters #>)
        {
            return new <#= className #>(
                <#= enumName #>.<#= item.Name #>,
                new System.Collections.Generic.Dictionary<string, string>()
                {
<#+
            if (item.Parameters.Any())
            {
                foreach (var param in item.Parameters)
                {
                    string paramValue = char.ToLower(param[0]) + param.Substring(1);
#>
                    { "<#= param #>", <#= paramValue#> },
<#+
                }
            }
#>
                },
                new System.Collections.Generic.Dictionary<string, string>()
                {
<#+
            if (item.TagsDict.Any())
            {
                foreach (var tag in item.TagsDict)
                {
#>
                    { "<#= tag.Key #>", "<#= tag.Value #>" },
<#+
                }
            }
#>
                });
<#+
            if (i < nodes.Count - 1)
            {
#>
        }

<#+
            }
            else
            {
#>
        }
<#+
            }
        }
#>
    }
<#+
    }

    /// <summary>
    /// Emits accessors for resource strings.
    /// </summary>
    internal void EmitResourceStringAccessors(
        string className,
        List<string> resourceStringElements,
        string resourceIdPrefix,
        string resourceFileName)
    {
#>
    /// <summary>
    /// Accessors for resource string that take culture as input and return localized string.
    /// </summary>
    public partial class <#= className #>
    {
<#+
        foreach (var item in resourceStringElements)
        {
#>
        public string Get<#=item#>(string culture = null)
        {
            culture = culture ?? CultureInfo.InstalledUICulture.Name;
            string resourceId = $"<#=resourceIdPrefix#>_{(int)this.Id}_<#=item#>";
            return MessageFormatter.GetFormattedMessageString(
                resourceId,
                this.Parameters,
                culture);
        }

        public string Get<#=item#>Safe(string culture = null)
        {
            try
            {
                return this.Get<#=item#>(culture);
            }
            catch (Exception)
            {
                return $"Unable to retrieve event message.";
            }
        }

<#+
        }
#>
        /// <summary>
        /// Message formatter class for creating messages in the requested culture.
        /// </summary>
        private class MessageFormatter
        {
            /// <summary>
            /// If a message parameter is not passed, it will be replaced with this string.
            /// </summary>
            private const string NoParameterMarker = "";

            /// <summary>
            /// For having a % character in the message, its better to use %% in the message.
            /// The %% in the message is replaced with this for safe parsing, and replaced back
            /// with %.
            /// </summary>
            private const string ANSIIMarkerForPercent = "&#37;";

            /// <summary>
            /// Regular expression for matching parameter names (e.g. %PrimaryCloudName;) in the
            /// message.
            /// </summary>
            private static readonly Regex ParameterRegex = new Regex(
                @"%[^%]*?;",
                RegexOptions.Singleline | RegexOptions.IgnoreCase | RegexOptions.Compiled);

            /// <summary>
            /// Resource manager instance for fetching the messages from the resource file.
            /// </summary>
            private static ResourceManager resourceManager;

            /// <summary>
            /// Initializes static members of the <see cref="MessageFormatter"/> class.
            /// </summary>
            static MessageFormatter()
            {
                resourceManager =
                    new ResourceManager(
                        "<#=resourceFileName#>",
                        typeof(<#=className#>).Assembly);
            }

            /// <summary>
            /// Formats and returns the message string in the given locale.
            /// </summary>
            /// <param name="resourceId">The resource id.</param>
            /// <param name="parameters">Collection of named parameters for creating message.
            /// </param>
            /// <param name="culture">The culture, in which the string is needed.</param>
            /// <returns>
            /// Formatted message in the given locale. Empty string if resource not found.
            /// </returns>
            public static string GetFormattedMessageString(
                string resourceId,
                IDictionary<string, string> parameters,
                string culture)
            {
                string formatString = GetResourceString(resourceId, culture);
                return FormatString(formatString, parameters);
            }

            /// <summary>
            /// Get resource string for the specified resource id. Empty string if resource is
            /// not found.
            /// </summary>
            /// <param name="resourceId">The resource id.</param>
            /// <param name="culture">The culture, in which the string is needed.</param>
            /// <returns>Resource string in the given locale. Null if resource not found.
            /// </returns>
            private static string GetResourceString(
                string resourceId,
                string culture)
            {
                CultureInfo cultureInfo = null;
                try
                {
                    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language
                    if (culture != null && culture.Contains(","))
                    {
                        culture = culture.Split(',')[0];
                    }

                    cultureInfo = new CultureInfo(culture ?? string.Empty);
                }
                catch (CultureNotFoundException)
                {
                    // Client can send a locale which is valid on client system, but is not
                    // supported by the OS/.NET versions of the Gateway web/worker roles.
                    // Unsupported culture in OS/.NET will default to 'en-US'.
                    cultureInfo = new CultureInfo("en-US");
                }

                return resourceManager.GetString(resourceId, cultureInfo);
            }

            /// <summary>
            /// Replace all the message parameters with that in the list of parameters passed.
            /// </summary>
            /// <param name="formatString">The formatted message in which the values need to be
            /// replaced.</param>
            /// <param name="parameters">A key value pair of message parameters and values.</param>
            /// <returns>The string with all the parameters replaced.</returns>
            private static string FormatString(
                string formatString,
                IDictionary<string, string> parameters)
            {
                if (string.IsNullOrWhiteSpace(formatString))
                {
                    return string.Empty;
                }

                StringBuilder sb = new StringBuilder();

                sb.Append(formatString);

                // hide percentage escape characters using their ANSI marker
                sb.Replace("%%", ANSIIMarkerForPercent);

                foreach (Match param in MessageFormatter.ParameterRegex.Matches(formatString))
                {
                    string key = param.Value.Substring(1, param.Length - 2);
                    string parameter;
                    if (parameters == null || !parameters.TryGetValue(key, out parameter))
                    {
                        parameter = MessageFormatter.NoParameterMarker;
                    }

                    sb.Replace(param.Value, parameter);
                }

                sb.Replace(ANSIIMarkerForPercent, "%");

                return sb.ToString();
            }
        }
    }
<#+
    }

    /// <summary>
    /// Emits accessors for specified element and the backing map.
    /// </summary>
    internal void EmitElementAccessor(
        List<_XmlNode> nodes,
        string className,
        string enumName,
        string elementName)
    {
#>
    /// <summary>
    /// Accessors for <#=elementName#>.
    /// </summary>
    public partial class <#=className#>
    {
        private static Dictionary<<#=enumName#>, string> <#=enumName#><#=elementName#>Map { get; } =
            new Dictionary<<#=enumName#>, string>
            {
<#+
        foreach (var item in nodes)
        {
            if (item.Element.ContainsKey(elementName))
            {
#>
                { <#=enumName#>.<#=item.Name#>, "<#=item.Element[elementName]#>" },
<#+
            }
        }
#>
            };

        public static string Get<#=elementName#>(<#=enumName#> id)
        {
            return <#=enumName#><#=elementName#>Map[id];
        }

        public static bool TryGet<#=elementName#>(<#=enumName#> id, out string value)
        {
            return <#=enumName#><#=elementName#>Map.TryGetValue(id, out value);
        }
    }
<#+
    }
#>