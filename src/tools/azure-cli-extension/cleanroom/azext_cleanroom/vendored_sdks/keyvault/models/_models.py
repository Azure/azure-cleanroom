# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization
from azure.core.exceptions import HttpResponseError


class AccessPolicyEntry(msrest.serialization.Model):
    """An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.

    All required parameters must be populated in order to send to Azure.

    :ivar tenant_id: Required. The Azure Active Directory tenant ID that should be used for
     authenticating requests to the key vault.
    :vartype tenant_id: str
    :ivar object_id: Required. The object ID of a user, service principal or security group in the
     Azure Active Directory tenant for the vault. The object ID must be unique for the list of
     access policies.
    :vartype object_id: str
    :ivar application_id: Application ID of the client making request on behalf of a principal.
    :vartype application_id: str
    :ivar permissions: Required. Permissions the identity has for keys, secrets and certificates.
    :vartype permissions: ~azure.mgmt.keyvault.v2023_07_01.models.Permissions
    """

    _validation = {
        'tenant_id': {'required': True},
        'object_id': {'required': True},
        'permissions': {'required': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'permissions': {'key': 'permissions', 'type': 'Permissions'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: Required. The Azure Active Directory tenant ID that should be used for
         authenticating requests to the key vault.
        :paramtype tenant_id: str
        :keyword object_id: Required. The object ID of a user, service principal or security group in
         the Azure Active Directory tenant for the vault. The object ID must be unique for the list of
         access policies.
        :paramtype object_id: str
        :keyword application_id: Application ID of the client making request on behalf of a principal.
        :paramtype application_id: str
        :keyword permissions: Required. Permissions the identity has for keys, secrets and
         certificates.
        :paramtype permissions: ~azure.mgmt.keyvault.v2023_07_01.models.Permissions
        """
        super(AccessPolicyEntry, self).__init__(**kwargs)
        self.tenant_id = kwargs['tenant_id']
        self.object_id = kwargs['object_id']
        self.application_id = kwargs.get('application_id', None)
        self.permissions = kwargs['permissions']


class Action(msrest.serialization.Model):
    """Action.

    :ivar type: The type of action. Possible values include: "rotate", "notify".
    :vartype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "rotate", "notify".
        :paramtype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyActionType
        """
        super(Action, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class Attributes(msrest.serialization.Model):
    """The object attributes managed by the KeyVault service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: Determines whether the object is enabled.
    :vartype enabled: bool
    :ivar not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
    :vartype not_before: ~datetime.datetime
    :ivar expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
    :vartype expires: ~datetime.datetime
    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: ~datetime.datetime
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: ~datetime.datetime
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'not_before': {'key': 'nbf', 'type': 'unix-time'},
        'expires': {'key': 'exp', 'type': 'unix-time'},
        'created': {'key': 'created', 'type': 'unix-time'},
        'updated': {'key': 'updated', 'type': 'unix-time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Determines whether the object is enabled.
        :paramtype enabled: bool
        :keyword not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
        :paramtype not_before: ~datetime.datetime
        :keyword expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
        :paramtype expires: ~datetime.datetime
        """
        super(Attributes, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.not_before = kwargs.get('not_before', None)
        self.expires = kwargs.get('expires', None)
        self.created = None
        self.updated = None


class CheckMhsmNameAvailabilityParameters(msrest.serialization.Model):
    """The parameters used to check the availability of the managed hsm name.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The managed hsm name.
    :vartype name: str
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The managed hsm name.
        :paramtype name: str
        """
        super(CheckMhsmNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = kwargs['name']


class CheckMhsmNameAvailabilityResult(msrest.serialization.Model):
    """The CheckMhsmNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: A boolean value that indicates whether the name is available for you to
     use. If true, the name is available. If false, the name has already been taken or is invalid
     and cannot be used.
    :vartype name_available: bool
    :ivar reason: The reason that a managed hsm name could not be used. The reason element is only
     returned if NameAvailable is false. Possible values include: "AccountNameInvalid",
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.keyvault.v2023_07_01.models.Reason
    :ivar message: An error message explaining the Reason value in more detail.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(CheckMhsmNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CheckNameAvailabilityResult(msrest.serialization.Model):
    """The CheckNameAvailability operation response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name_available: A boolean value that indicates whether the name is available for you to
     use. If true, the name is available. If false, the name has already been taken or is invalid
     and cannot be used.
    :vartype name_available: bool
    :ivar reason: The reason that a vault name could not be used. The Reason element is only
     returned if NameAvailable is false. Possible values include: "AccountNameInvalid",
     "AlreadyExists".
    :vartype reason: str or ~azure.mgmt.keyvault.v2023_07_01.models.Reason
    :ivar message: An error message explaining the Reason value in more detail.
    :vartype message: str
    """

    _validation = {
        'name_available': {'readonly': True},
        'reason': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'name_available': {'key': 'nameAvailable', 'type': 'bool'},
        'reason': {'key': 'reason', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(CheckNameAvailabilityResult, self).__init__(**kwargs)
        self.name_available = None
        self.reason = None
        self.message = None


class CloudErrorBody(msrest.serialization.Model):
    """An error response from Key Vault resource provider.

    :ivar code: Error code. This is a mnemonic that can be consumed programmatically.
    :vartype code: str
    :ivar message: User friendly error message. The message is typically localized and may vary
     with service version.
    :vartype message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword code: Error code. This is a mnemonic that can be consumed programmatically.
        :paramtype code: str
        :keyword message: User friendly error message. The message is typically localized and may vary
         with service version.
        :paramtype message: str
        """
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)


class DeletedManagedHsm(msrest.serialization.Model):
    """DeletedManagedHsm.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Azure Resource Manager resource ID for the deleted managed HSM Pool.
    :vartype id: str
    :ivar name: The name of the managed HSM Pool.
    :vartype name: str
    :ivar type: The resource type of the managed HSM Pool.
    :vartype type: str
    :ivar properties: Properties of the deleted managed HSM.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.DeletedManagedHsmProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeletedManagedHsmProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Properties of the deleted managed HSM.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.DeletedManagedHsmProperties
        """
        super(DeletedManagedHsm, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = kwargs.get('properties', None)


class DeletedManagedHsmListResult(msrest.serialization.Model):
    """List of deleted managed HSM Pools.

    :ivar value: The list of deleted managed HSM Pools.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.DeletedManagedHsm]
    :ivar next_link: The URL to get the next set of deleted managed HSM Pools.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeletedManagedHsm]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of deleted managed HSM Pools.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.DeletedManagedHsm]
        :keyword next_link: The URL to get the next set of deleted managed HSM Pools.
        :paramtype next_link: str
        """
        super(DeletedManagedHsmListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DeletedManagedHsmProperties(msrest.serialization.Model):
    """Properties of the deleted managed HSM.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar mhsm_id: The resource id of the original managed HSM.
    :vartype mhsm_id: str
    :ivar location: The location of the original managed HSM.
    :vartype location: str
    :ivar deletion_date: The deleted date.
    :vartype deletion_date: ~datetime.datetime
    :ivar scheduled_purge_date: The scheduled purged date.
    :vartype scheduled_purge_date: ~datetime.datetime
    :ivar purge_protection_enabled: Purge protection status of the original managed HSM.
    :vartype purge_protection_enabled: bool
    :ivar tags: A set of tags. Tags of the original managed HSM.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'mhsm_id': {'readonly': True},
        'location': {'readonly': True},
        'deletion_date': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'purge_protection_enabled': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'mhsm_id': {'key': 'mhsmId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'deletion_date': {'key': 'deletionDate', 'type': 'iso-8601'},
        'scheduled_purge_date': {'key': 'scheduledPurgeDate', 'type': 'iso-8601'},
        'purge_protection_enabled': {'key': 'purgeProtectionEnabled', 'type': 'bool'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DeletedManagedHsmProperties, self).__init__(**kwargs)
        self.mhsm_id = None
        self.location = None
        self.deletion_date = None
        self.scheduled_purge_date = None
        self.purge_protection_enabled = None
        self.tags = None


class DeletedVault(msrest.serialization.Model):
    """Deleted vault information with extended details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The resource ID for the deleted key vault.
    :vartype id: str
    :ivar name: The name of the key vault.
    :vartype name: str
    :ivar type: The resource type of the key vault.
    :vartype type: str
    :ivar properties: Properties of the vault.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.DeletedVaultProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeletedVaultProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Properties of the vault.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.DeletedVaultProperties
        """
        super(DeletedVault, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = kwargs.get('properties', None)


class DeletedVaultListResult(msrest.serialization.Model):
    """List of vaults.

    :ivar value: The list of deleted vaults.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.DeletedVault]
    :ivar next_link: The URL to get the next set of deleted vaults.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DeletedVault]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of deleted vaults.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.DeletedVault]
        :keyword next_link: The URL to get the next set of deleted vaults.
        :paramtype next_link: str
        """
        super(DeletedVaultListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class DeletedVaultProperties(msrest.serialization.Model):
    """Properties of the deleted vault.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar vault_id: The resource id of the original vault.
    :vartype vault_id: str
    :ivar location: The location of the original vault.
    :vartype location: str
    :ivar deletion_date: The deleted date.
    :vartype deletion_date: ~datetime.datetime
    :ivar scheduled_purge_date: The scheduled purged date.
    :vartype scheduled_purge_date: ~datetime.datetime
    :ivar tags: A set of tags. Tags of the original vault.
    :vartype tags: dict[str, str]
    :ivar purge_protection_enabled: Purge protection status of the original vault.
    :vartype purge_protection_enabled: bool
    """

    _validation = {
        'vault_id': {'readonly': True},
        'location': {'readonly': True},
        'deletion_date': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'tags': {'readonly': True},
        'purge_protection_enabled': {'readonly': True},
    }

    _attribute_map = {
        'vault_id': {'key': 'vaultId', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'deletion_date': {'key': 'deletionDate', 'type': 'iso-8601'},
        'scheduled_purge_date': {'key': 'scheduledPurgeDate', 'type': 'iso-8601'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'purge_protection_enabled': {'key': 'purgeProtectionEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(DeletedVaultProperties, self).__init__(**kwargs)
        self.vault_id = None
        self.location = None
        self.deletion_date = None
        self.scheduled_purge_date = None
        self.tags = None
        self.purge_protection_enabled = None


class DimensionProperties(msrest.serialization.Model):
    """Type of operation: get, read, delete, etc.

    :ivar name: Name of dimension.
    :vartype name: str
    :ivar display_name: Display name of dimension.
    :vartype display_name: str
    :ivar to_be_exported_for_shoebox: Property to specify whether the dimension should be exported
     for Shoebox.
    :vartype to_be_exported_for_shoebox: bool
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'to_be_exported_for_shoebox': {'key': 'toBeExportedForShoebox', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of dimension.
        :paramtype name: str
        :keyword display_name: Display name of dimension.
        :paramtype display_name: str
        :keyword to_be_exported_for_shoebox: Property to specify whether the dimension should be
         exported for Shoebox.
        :paramtype to_be_exported_for_shoebox: bool
        """
        super(DimensionProperties, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.to_be_exported_for_shoebox = kwargs.get('to_be_exported_for_shoebox', None)


class Error(msrest.serialization.Model):
    """The server error.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar inner_error: The inner error, contains a more specific error code.
    :vartype inner_error: ~azure.mgmt.keyvault.v2023_07_01.models.Error
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'inner_error': {'key': 'innererror', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Error, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.inner_error = None


class IPRule(msrest.serialization.Model):
    """A rule governing the accessibility of a vault from a specific ip address or ip range.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple
     IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
    :vartype value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. An IPv4 address range in CIDR notation, such as '124.56.78.91'
         (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        :paramtype value: str
        """
        super(IPRule, self).__init__(**kwargs)
        self.value = kwargs['value']


class Resource(msrest.serialization.Model):
    """Key Vault resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = None
        self.tags = None


class Key(Resource):
    """The key resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    :ivar attributes: The attributes of the key.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyAttributes
    :ivar kty: The type of the key. For valid values, see JsonWebKeyType. Possible values include:
     "EC", "EC-HSM", "RSA", "RSA-HSM".
    :vartype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
    :ivar key_ops:
    :vartype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
    :ivar key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    :vartype key_size: int
    :ivar curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible
     values include: "P-256", "P-384", "P-521", "P-256K".
    :vartype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
    :ivar key_uri: The URI to retrieve the current version of the key.
    :vartype key_uri: str
    :ivar key_uri_with_version: The URI to retrieve the specific version of the key.
    :vartype key_uri_with_version: str
    :ivar rotation_policy: Key rotation policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.RotationPolicy
    :ivar release_policy: Key release policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.KeyReleasePolicy
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
        'key_uri': {'readonly': True},
        'key_uri_with_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'attributes': {'key': 'properties.attributes', 'type': 'KeyAttributes'},
        'kty': {'key': 'properties.kty', 'type': 'str'},
        'key_ops': {'key': 'properties.keyOps', 'type': '[str]'},
        'key_size': {'key': 'properties.keySize', 'type': 'int'},
        'curve_name': {'key': 'properties.curveName', 'type': 'str'},
        'key_uri': {'key': 'properties.keyUri', 'type': 'str'},
        'key_uri_with_version': {'key': 'properties.keyUriWithVersion', 'type': 'str'},
        'rotation_policy': {'key': 'properties.rotationPolicy', 'type': 'RotationPolicy'},
        'release_policy': {'key': 'properties.release_policy', 'type': 'KeyReleasePolicy'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword attributes: The attributes of the key.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyAttributes
        :keyword kty: The type of the key. For valid values, see JsonWebKeyType. Possible values
         include: "EC", "EC-HSM", "RSA", "RSA-HSM".
        :paramtype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
        :keyword key_ops:
        :paramtype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
        :keyword key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
        :paramtype key_size: int
        :keyword curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
         Possible values include: "P-256", "P-384", "P-521", "P-256K".
        :paramtype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
        :keyword rotation_policy: Key rotation policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.RotationPolicy
        :keyword release_policy: Key release policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.KeyReleasePolicy
        """
        super(Key, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.kty = kwargs.get('kty', None)
        self.key_ops = kwargs.get('key_ops', None)
        self.key_size = kwargs.get('key_size', None)
        self.curve_name = kwargs.get('curve_name', None)
        self.key_uri = None
        self.key_uri_with_version = None
        self.rotation_policy = kwargs.get('rotation_policy', None)
        self.release_policy = kwargs.get('release_policy', None)


class KeyAttributes(msrest.serialization.Model):
    """The object attributes managed by the Azure Key Vault service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: Determines whether or not the object is enabled.
    :vartype enabled: bool
    :ivar not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
    :vartype not_before: long
    :ivar expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
    :vartype expires: long
    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: long
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: long
    :ivar recovery_level: The deletion recovery level currently in effect for the object. If it
     contains 'Purgeable', then the object can be permanently deleted by a privileged user;
     otherwise, only the system can purge the object at the end of the retention interval. Possible
     values include: "Purgeable", "Recoverable+Purgeable", "Recoverable",
     "Recoverable+ProtectedSubscription".
    :vartype recovery_level: str or ~azure.mgmt.keyvault.v2023_07_01.models.DeletionRecoveryLevel
    :ivar exportable: Indicates if the private key can be exported.
    :vartype exportable: bool
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
        'recovery_level': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'not_before': {'key': 'nbf', 'type': 'long'},
        'expires': {'key': 'exp', 'type': 'long'},
        'created': {'key': 'created', 'type': 'long'},
        'updated': {'key': 'updated', 'type': 'long'},
        'recovery_level': {'key': 'recoveryLevel', 'type': 'str'},
        'exportable': {'key': 'exportable', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Determines whether or not the object is enabled.
        :paramtype enabled: bool
        :keyword not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
        :paramtype not_before: long
        :keyword expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
        :paramtype expires: long
        :keyword exportable: Indicates if the private key can be exported.
        :paramtype exportable: bool
        """
        super(KeyAttributes, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.not_before = kwargs.get('not_before', None)
        self.expires = kwargs.get('expires', None)
        self.created = None
        self.updated = None
        self.recovery_level = None
        self.exportable = kwargs.get('exportable', False)


class KeyCreateParameters(msrest.serialization.Model):
    """The parameters used to create a key.

    All required parameters must be populated in order to send to Azure.

    :ivar tags: A set of tags. The tags that will be assigned to the key.
    :vartype tags: dict[str, str]
    :ivar properties: Required. The properties of the key to be created.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.KeyProperties
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'KeyProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags that will be assigned to the key.
        :paramtype tags: dict[str, str]
        :keyword properties: Required. The properties of the key to be created.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.KeyProperties
        """
        super(KeyCreateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs['properties']


class KeyListResult(msrest.serialization.Model):
    """The page of keys.

    :ivar value: The key resources.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Key]
    :ivar next_link: The URL to get the next page of keys.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Key]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The key resources.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Key]
        :keyword next_link: The URL to get the next page of keys.
        :paramtype next_link: str
        """
        super(KeyListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class KeyProperties(msrest.serialization.Model):
    """The properties of the key.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar attributes: The attributes of the key.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyAttributes
    :ivar kty: The type of the key. For valid values, see JsonWebKeyType. Possible values include:
     "EC", "EC-HSM", "RSA", "RSA-HSM".
    :vartype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
    :ivar key_ops:
    :vartype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
    :ivar key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    :vartype key_size: int
    :ivar curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible
     values include: "P-256", "P-384", "P-521", "P-256K".
    :vartype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
    :ivar key_uri: The URI to retrieve the current version of the key.
    :vartype key_uri: str
    :ivar key_uri_with_version: The URI to retrieve the specific version of the key.
    :vartype key_uri_with_version: str
    :ivar rotation_policy: Key rotation policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.RotationPolicy
    :ivar release_policy: Key release policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.KeyReleasePolicy
    """

    _validation = {
        'key_uri': {'readonly': True},
        'key_uri_with_version': {'readonly': True},
    }

    _attribute_map = {
        'attributes': {'key': 'attributes', 'type': 'KeyAttributes'},
        'kty': {'key': 'kty', 'type': 'str'},
        'key_ops': {'key': 'keyOps', 'type': '[str]'},
        'key_size': {'key': 'keySize', 'type': 'int'},
        'curve_name': {'key': 'curveName', 'type': 'str'},
        'key_uri': {'key': 'keyUri', 'type': 'str'},
        'key_uri_with_version': {'key': 'keyUriWithVersion', 'type': 'str'},
        'rotation_policy': {'key': 'rotationPolicy', 'type': 'RotationPolicy'},
        'release_policy': {'key': 'release_policy', 'type': 'KeyReleasePolicy'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword attributes: The attributes of the key.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyAttributes
        :keyword kty: The type of the key. For valid values, see JsonWebKeyType. Possible values
         include: "EC", "EC-HSM", "RSA", "RSA-HSM".
        :paramtype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
        :keyword key_ops:
        :paramtype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
        :keyword key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
        :paramtype key_size: int
        :keyword curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
         Possible values include: "P-256", "P-384", "P-521", "P-256K".
        :paramtype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
        :keyword rotation_policy: Key rotation policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.RotationPolicy
        :keyword release_policy: Key release policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.KeyReleasePolicy
        """
        super(KeyProperties, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.kty = kwargs.get('kty', None)
        self.key_ops = kwargs.get('key_ops', None)
        self.key_size = kwargs.get('key_size', None)
        self.curve_name = kwargs.get('curve_name', None)
        self.key_uri = None
        self.key_uri_with_version = None
        self.rotation_policy = kwargs.get('rotation_policy', None)
        self.release_policy = kwargs.get('release_policy', None)


class KeyReleasePolicy(msrest.serialization.Model):
    """KeyReleasePolicy.

    :ivar content_type: Content type and version of key release policy.
    :vartype content_type: str
    :ivar data: Blob encoding the policy rules under which the key can be released.
    :vartype data: bytes
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'data': {'key': 'data', 'type': 'base64'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content_type: Content type and version of key release policy.
        :paramtype content_type: str
        :keyword data: Blob encoding the policy rules under which the key can be released.
        :paramtype data: bytes
        """
        super(KeyReleasePolicy, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', "application/json; charset=utf-8")
        self.data = kwargs.get('data', None)


class KeyRotationPolicyAttributes(msrest.serialization.Model):
    """KeyRotationPolicyAttributes.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: long
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: long
    :ivar expiry_time: The expiration time for the new key version. It should be in ISO8601 format.
     Eg: 'P90D', 'P1Y'.
    :vartype expiry_time: str
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
    }

    _attribute_map = {
        'created': {'key': 'created', 'type': 'long'},
        'updated': {'key': 'updated', 'type': 'long'},
        'expiry_time': {'key': 'expiryTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword expiry_time: The expiration time for the new key version. It should be in ISO8601
         format. Eg: 'P90D', 'P1Y'.
        :paramtype expiry_time: str
        """
        super(KeyRotationPolicyAttributes, self).__init__(**kwargs)
        self.created = None
        self.updated = None
        self.expiry_time = kwargs.get('expiry_time', None)


class LifetimeAction(msrest.serialization.Model):
    """LifetimeAction.

    :ivar trigger: The trigger of key rotation policy lifetimeAction.
    :vartype trigger: ~azure.mgmt.keyvault.v2023_07_01.models.Trigger
    :ivar action: The action of key rotation policy lifetimeAction.
    :vartype action: ~azure.mgmt.keyvault.v2023_07_01.models.Action
    """

    _attribute_map = {
        'trigger': {'key': 'trigger', 'type': 'Trigger'},
        'action': {'key': 'action', 'type': 'Action'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword trigger: The trigger of key rotation policy lifetimeAction.
        :paramtype trigger: ~azure.mgmt.keyvault.v2023_07_01.models.Trigger
        :keyword action: The action of key rotation policy lifetimeAction.
        :paramtype action: ~azure.mgmt.keyvault.v2023_07_01.models.Action
        """
        super(LifetimeAction, self).__init__(**kwargs)
        self.trigger = kwargs.get('trigger', None)
        self.action = kwargs.get('action', None)


class LogSpecification(msrest.serialization.Model):
    """Log specification of operation.

    :ivar name: Name of log specification.
    :vartype name: str
    :ivar display_name: Display name of log specification.
    :vartype display_name: str
    :ivar blob_duration: Blob duration of specification.
    :vartype blob_duration: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'blob_duration': {'key': 'blobDuration', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of log specification.
        :paramtype name: str
        :keyword display_name: Display name of log specification.
        :paramtype display_name: str
        :keyword blob_duration: Blob duration of specification.
        :paramtype blob_duration: str
        """
        super(LogSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.blob_duration = kwargs.get('blob_duration', None)


class ManagedHsmResource(msrest.serialization.Model):
    """Managed HSM resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Azure Resource Manager resource ID for the managed HSM Pool.
    :vartype id: str
    :ivar name: The name of the managed HSM Pool.
    :vartype name: str
    :ivar type: The resource type of the managed HSM Pool.
    :vartype type: str
    :ivar location: The supported Azure location where the managed HSM Pool should be created.
    :vartype location: str
    :ivar sku: SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the key vault
     resource.
    :vartype system_data: ~azure.mgmt.keyvault.v2023_07_01.models.SystemData
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ManagedHsmSku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: The supported Azure location where the managed HSM Pool should be created.
        :paramtype location: str
        :keyword sku: SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
        """
        super(ManagedHsmResource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.sku = kwargs.get('sku', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = None
        self.identity = kwargs.get('identity', None)


class ManagedHsm(ManagedHsmResource):
    """Resource information with extended details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Azure Resource Manager resource ID for the managed HSM Pool.
    :vartype id: str
    :ivar name: The name of the managed HSM Pool.
    :vartype name: str
    :ivar type: The resource type of the managed HSM Pool.
    :vartype type: str
    :ivar location: The supported Azure location where the managed HSM Pool should be created.
    :vartype location: str
    :ivar sku: SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the key vault
     resource.
    :vartype system_data: ~azure.mgmt.keyvault.v2023_07_01.models.SystemData
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
    :ivar properties: Properties of the managed HSM.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ManagedHsmSku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'properties': {'key': 'properties', 'type': 'ManagedHsmProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: The supported Azure location where the managed HSM Pool should be created.
        :paramtype location: str
        :keyword sku: SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
        :keyword properties: Properties of the managed HSM.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmProperties
        """
        super(ManagedHsm, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)


class ManagedHsmAction(msrest.serialization.Model):
    """ManagedHsmAction.

    :ivar type: The type of action. Possible values include: "rotate", "notify".
    :vartype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyActionType
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: The type of action. Possible values include: "rotate", "notify".
        :paramtype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyActionType
        """
        super(ManagedHsmAction, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class ManagedHsmError(msrest.serialization.Model):
    """The error exception.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar error: The server error.
    :vartype error: ~azure.mgmt.keyvault.v2023_07_01.models.Error
    """

    _validation = {
        'error': {'readonly': True},
    }

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ManagedHsmError, self).__init__(**kwargs)
        self.error = None


class ProxyResourceWithoutSystemData(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        """
        super(ProxyResourceWithoutSystemData, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.tags = kwargs.get('tags', None)


class ManagedHsmKey(ProxyResourceWithoutSystemData):
    """The key resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar attributes: The attributes of the key.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyAttributes
    :ivar kty: The type of the key. For valid values, see JsonWebKeyType. Possible values include:
     "EC", "EC-HSM", "RSA", "RSA-HSM".
    :vartype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
    :ivar key_ops:
    :vartype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
    :ivar key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    :vartype key_size: int
    :ivar curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible
     values include: "P-256", "P-384", "P-521", "P-256K".
    :vartype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
    :ivar key_uri: The URI to retrieve the current version of the key.
    :vartype key_uri: str
    :ivar key_uri_with_version: The URI to retrieve the specific version of the key.
    :vartype key_uri_with_version: str
    :ivar rotation_policy: Key rotation policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmRotationPolicy
    :ivar release_policy: Key release policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyReleasePolicy
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'key_uri': {'readonly': True},
        'key_uri_with_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'attributes': {'key': 'properties.attributes', 'type': 'ManagedHsmKeyAttributes'},
        'kty': {'key': 'properties.kty', 'type': 'str'},
        'key_ops': {'key': 'properties.keyOps', 'type': '[str]'},
        'key_size': {'key': 'properties.keySize', 'type': 'int'},
        'curve_name': {'key': 'properties.curveName', 'type': 'str'},
        'key_uri': {'key': 'properties.keyUri', 'type': 'str'},
        'key_uri_with_version': {'key': 'properties.keyUriWithVersion', 'type': 'str'},
        'rotation_policy': {'key': 'properties.rotationPolicy', 'type': 'ManagedHsmRotationPolicy'},
        'release_policy': {'key': 'properties.release_policy', 'type': 'ManagedHsmKeyReleasePolicy'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword attributes: The attributes of the key.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyAttributes
        :keyword kty: The type of the key. For valid values, see JsonWebKeyType. Possible values
         include: "EC", "EC-HSM", "RSA", "RSA-HSM".
        :paramtype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
        :keyword key_ops:
        :paramtype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
        :keyword key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
        :paramtype key_size: int
        :keyword curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
         Possible values include: "P-256", "P-384", "P-521", "P-256K".
        :paramtype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
        :keyword rotation_policy: Key rotation policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmRotationPolicy
        :keyword release_policy: Key release policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyReleasePolicy
        """
        super(ManagedHsmKey, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.kty = kwargs.get('kty', None)
        self.key_ops = kwargs.get('key_ops', None)
        self.key_size = kwargs.get('key_size', None)
        self.curve_name = kwargs.get('curve_name', None)
        self.key_uri = None
        self.key_uri_with_version = None
        self.rotation_policy = kwargs.get('rotation_policy', None)
        self.release_policy = kwargs.get('release_policy', None)


class ManagedHsmKeyAttributes(msrest.serialization.Model):
    """The object attributes managed by the Azure Key Vault service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: Determines whether or not the object is enabled.
    :vartype enabled: bool
    :ivar not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
    :vartype not_before: long
    :ivar expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
    :vartype expires: long
    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: long
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: long
    :ivar recovery_level: The deletion recovery level currently in effect for the object. If it
     contains 'Purgeable', then the object can be permanently deleted by a privileged user;
     otherwise, only the system can purge the object at the end of the retention interval. Possible
     values include: "Purgeable", "Recoverable+Purgeable", "Recoverable",
     "Recoverable+ProtectedSubscription".
    :vartype recovery_level: str or ~azure.mgmt.keyvault.v2023_07_01.models.DeletionRecoveryLevel
    :ivar exportable: Indicates if the private key can be exported.
    :vartype exportable: bool
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
        'recovery_level': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'not_before': {'key': 'nbf', 'type': 'long'},
        'expires': {'key': 'exp', 'type': 'long'},
        'created': {'key': 'created', 'type': 'long'},
        'updated': {'key': 'updated', 'type': 'long'},
        'recovery_level': {'key': 'recoveryLevel', 'type': 'str'},
        'exportable': {'key': 'exportable', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Determines whether or not the object is enabled.
        :paramtype enabled: bool
        :keyword not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
        :paramtype not_before: long
        :keyword expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
        :paramtype expires: long
        :keyword exportable: Indicates if the private key can be exported.
        :paramtype exportable: bool
        """
        super(ManagedHsmKeyAttributes, self).__init__(**kwargs)
        self.enabled = kwargs.get('enabled', None)
        self.not_before = kwargs.get('not_before', None)
        self.expires = kwargs.get('expires', None)
        self.created = None
        self.updated = None
        self.recovery_level = None
        self.exportable = kwargs.get('exportable', None)


class ManagedHsmKeyCreateParameters(msrest.serialization.Model):
    """The parameters used to create a key.

    All required parameters must be populated in order to send to Azure.

    :ivar tags: A set of tags. The tags that will be assigned to the key.
    :vartype tags: dict[str, str]
    :ivar properties: Required. The properties of the key to be created.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyProperties
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'ManagedHsmKeyProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags that will be assigned to the key.
        :paramtype tags: dict[str, str]
        :keyword properties: Required. The properties of the key to be created.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyProperties
        """
        super(ManagedHsmKeyCreateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs['properties']


class ManagedHsmKeyListResult(msrest.serialization.Model):
    """The page of keys.

    :ivar value: The key resources.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKey]
    :ivar next_link: The URL to get the next page of keys.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ManagedHsmKey]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The key resources.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKey]
        :keyword next_link: The URL to get the next page of keys.
        :paramtype next_link: str
        """
        super(ManagedHsmKeyListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ManagedHsmKeyProperties(msrest.serialization.Model):
    """The properties of the key.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar attributes: The attributes of the key.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyAttributes
    :ivar kty: The type of the key. For valid values, see JsonWebKeyType. Possible values include:
     "EC", "EC-HSM", "RSA", "RSA-HSM".
    :vartype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
    :ivar key_ops:
    :vartype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
    :ivar key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
    :vartype key_size: int
    :ivar curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName. Possible
     values include: "P-256", "P-384", "P-521", "P-256K".
    :vartype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
    :ivar key_uri: The URI to retrieve the current version of the key.
    :vartype key_uri: str
    :ivar key_uri_with_version: The URI to retrieve the specific version of the key.
    :vartype key_uri_with_version: str
    :ivar rotation_policy: Key rotation policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmRotationPolicy
    :ivar release_policy: Key release policy in response. It will be used for both output and
     input. Omitted if empty.
    :vartype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyReleasePolicy
    """

    _validation = {
        'key_uri': {'readonly': True},
        'key_uri_with_version': {'readonly': True},
    }

    _attribute_map = {
        'attributes': {'key': 'attributes', 'type': 'ManagedHsmKeyAttributes'},
        'kty': {'key': 'kty', 'type': 'str'},
        'key_ops': {'key': 'keyOps', 'type': '[str]'},
        'key_size': {'key': 'keySize', 'type': 'int'},
        'curve_name': {'key': 'curveName', 'type': 'str'},
        'key_uri': {'key': 'keyUri', 'type': 'str'},
        'key_uri_with_version': {'key': 'keyUriWithVersion', 'type': 'str'},
        'rotation_policy': {'key': 'rotationPolicy', 'type': 'ManagedHsmRotationPolicy'},
        'release_policy': {'key': 'release_policy', 'type': 'ManagedHsmKeyReleasePolicy'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword attributes: The attributes of the key.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyAttributes
        :keyword kty: The type of the key. For valid values, see JsonWebKeyType. Possible values
         include: "EC", "EC-HSM", "RSA", "RSA-HSM".
        :paramtype kty: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyType
        :keyword key_ops:
        :paramtype key_ops: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyOperation]
        :keyword key_size: The key size in bits. For example: 2048, 3072, or 4096 for RSA.
        :paramtype key_size: int
        :keyword curve_name: The elliptic curve name. For valid values, see JsonWebKeyCurveName.
         Possible values include: "P-256", "P-384", "P-521", "P-256K".
        :paramtype curve_name: str or ~azure.mgmt.keyvault.v2023_07_01.models.JsonWebKeyCurveName
        :keyword rotation_policy: Key rotation policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype rotation_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmRotationPolicy
        :keyword release_policy: Key release policy in response. It will be used for both output and
         input. Omitted if empty.
        :paramtype release_policy: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyReleasePolicy
        """
        super(ManagedHsmKeyProperties, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.kty = kwargs.get('kty', None)
        self.key_ops = kwargs.get('key_ops', None)
        self.key_size = kwargs.get('key_size', None)
        self.curve_name = kwargs.get('curve_name', None)
        self.key_uri = None
        self.key_uri_with_version = None
        self.rotation_policy = kwargs.get('rotation_policy', None)
        self.release_policy = kwargs.get('release_policy', None)


class ManagedHsmKeyReleasePolicy(msrest.serialization.Model):
    """ManagedHsmKeyReleasePolicy.

    :ivar content_type: Content type and version of key release policy.
    :vartype content_type: str
    :ivar data: Blob encoding the policy rules under which the key can be released.
    :vartype data: bytes
    """

    _attribute_map = {
        'content_type': {'key': 'contentType', 'type': 'str'},
        'data': {'key': 'data', 'type': 'base64'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword content_type: Content type and version of key release policy.
        :paramtype content_type: str
        :keyword data: Blob encoding the policy rules under which the key can be released.
        :paramtype data: bytes
        """
        super(ManagedHsmKeyReleasePolicy, self).__init__(**kwargs)
        self.content_type = kwargs.get('content_type', "application/json; charset=utf-8")
        self.data = kwargs.get('data', None)


class ManagedHsmKeyRotationPolicyAttributes(msrest.serialization.Model):
    """ManagedHsmKeyRotationPolicyAttributes.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: long
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: long
    :ivar expiry_time: The expiration time for the new key version. It should be in ISO8601 format.
     Eg: 'P90D', 'P1Y'.
    :vartype expiry_time: str
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
    }

    _attribute_map = {
        'created': {'key': 'created', 'type': 'long'},
        'updated': {'key': 'updated', 'type': 'long'},
        'expiry_time': {'key': 'expiryTime', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword expiry_time: The expiration time for the new key version. It should be in ISO8601
         format. Eg: 'P90D', 'P1Y'.
        :paramtype expiry_time: str
        """
        super(ManagedHsmKeyRotationPolicyAttributes, self).__init__(**kwargs)
        self.created = None
        self.updated = None
        self.expiry_time = kwargs.get('expiry_time', None)


class ManagedHsmLifetimeAction(msrest.serialization.Model):
    """ManagedHsmLifetimeAction.

    :ivar trigger: The trigger of key rotation policy lifetimeAction.
    :vartype trigger: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmTrigger
    :ivar action: The action of key rotation policy lifetimeAction.
    :vartype action: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmAction
    """

    _attribute_map = {
        'trigger': {'key': 'trigger', 'type': 'ManagedHsmTrigger'},
        'action': {'key': 'action', 'type': 'ManagedHsmAction'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword trigger: The trigger of key rotation policy lifetimeAction.
        :paramtype trigger: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmTrigger
        :keyword action: The action of key rotation policy lifetimeAction.
        :paramtype action: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmAction
        """
        super(ManagedHsmLifetimeAction, self).__init__(**kwargs)
        self.trigger = kwargs.get('trigger', None)
        self.action = kwargs.get('action', None)


class ManagedHsmListResult(msrest.serialization.Model):
    """List of managed HSM Pools.

    :ivar value: The list of managed HSM Pools.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsm]
    :ivar next_link: The URL to get the next set of managed HSM Pools.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ManagedHsm]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of managed HSM Pools.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsm]
        :keyword next_link: The URL to get the next set of managed HSM Pools.
        :paramtype next_link: str
        """
        super(ManagedHsmListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ManagedHsmProperties(msrest.serialization.Model):
    """Properties of the managed HSM Pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar tenant_id: The Azure Active Directory tenant ID that should be used for authenticating
     requests to the managed HSM pool.
    :vartype tenant_id: str
    :ivar initial_admin_object_ids: Array of initial administrators object ids for this managed hsm
     pool.
    :vartype initial_admin_object_ids: list[str]
    :ivar hsm_uri: The URI of the managed hsm pool for performing operations on keys.
    :vartype hsm_uri: str
    :ivar enable_soft_delete: Property to specify whether the 'soft delete' functionality is
     enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and
     is immutable.
    :vartype enable_soft_delete: bool
    :ivar soft_delete_retention_in_days: Soft deleted data retention days. When you delete an HSM
     or a key, it will remain recoverable for the configured retention period or for a default
     period of 90 days. It accepts values between 7 and 90.
    :vartype soft_delete_retention_in_days: int
    :ivar enable_purge_protection: Property specifying whether protection against purge is enabled
     for this managed HSM pool. Setting this property to true activates protection against purge for
     this managed HSM pool and its content - only the Managed HSM service may initiate a hard,
     irrecoverable deletion. Enabling this functionality is irreversible.
    :vartype enable_purge_protection: bool
    :ivar create_mode: The create mode to indicate whether the resource is being created or is
     being recovered from a deleted resource. Possible values include: "recover", "default".
    :vartype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
    :ivar status_message: Resource Status Message.
    :vartype status_message: str
    :ivar provisioning_state: Provisioning state. Possible values include: "Succeeded",
     "Provisioning", "Failed", "Updating", "Deleting", "Activated", "SecurityDomainRestore",
     "Restoring".
    :vartype provisioning_state: str or ~azure.mgmt.keyvault.v2023_07_01.models.ProvisioningState
    :ivar network_acls: Rules governing the accessibility of the key vault from specific network
     locations.
    :vartype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMNetworkRuleSet
    :ivar regions: List of all regions associated with the managed hsm pool.
    :vartype regions: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMGeoReplicatedRegion]
    :ivar private_endpoint_connections: List of private endpoint connections associated with the
     managed hsm pool.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpointConnectionItem]
    :ivar public_network_access: Control permission to the managed HSM from public networks.
     Possible values include: "Enabled", "Disabled". Default value: "Enabled".
    :vartype public_network_access: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PublicNetworkAccess
    :ivar scheduled_purge_date: The scheduled purge date in UTC.
    :vartype scheduled_purge_date: ~datetime.datetime
    :ivar security_domain_properties: Managed HSM security domain properties.
    :vartype security_domain_properties:
     ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHSMSecurityDomainProperties
    """

    _validation = {
        'hsm_uri': {'readonly': True},
        'status_message': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
        'scheduled_purge_date': {'readonly': True},
        'security_domain_properties': {'readonly': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'initial_admin_object_ids': {'key': 'initialAdminObjectIds', 'type': '[str]'},
        'hsm_uri': {'key': 'hsmUri', 'type': 'str'},
        'enable_soft_delete': {'key': 'enableSoftDelete', 'type': 'bool'},
        'soft_delete_retention_in_days': {'key': 'softDeleteRetentionInDays', 'type': 'int'},
        'enable_purge_protection': {'key': 'enablePurgeProtection', 'type': 'bool'},
        'create_mode': {'key': 'createMode', 'type': 'str'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'network_acls': {'key': 'networkAcls', 'type': 'MHSMNetworkRuleSet'},
        'regions': {'key': 'regions', 'type': '[MHSMGeoReplicatedRegion]'},
        'private_endpoint_connections': {'key': 'privateEndpointConnections', 'type': '[MHSMPrivateEndpointConnectionItem]'},
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
        'scheduled_purge_date': {'key': 'scheduledPurgeDate', 'type': 'iso-8601'},
        'security_domain_properties': {'key': 'securityDomainProperties', 'type': 'ManagedHSMSecurityDomainProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: The Azure Active Directory tenant ID that should be used for authenticating
         requests to the managed HSM pool.
        :paramtype tenant_id: str
        :keyword initial_admin_object_ids: Array of initial administrators object ids for this managed
         hsm pool.
        :paramtype initial_admin_object_ids: list[str]
        :keyword enable_soft_delete: Property to specify whether the 'soft delete' functionality is
         enabled for this managed HSM pool. Soft delete is enabled by default for all managed HSMs and
         is immutable.
        :paramtype enable_soft_delete: bool
        :keyword soft_delete_retention_in_days: Soft deleted data retention days. When you delete an
         HSM or a key, it will remain recoverable for the configured retention period or for a default
         period of 90 days. It accepts values between 7 and 90.
        :paramtype soft_delete_retention_in_days: int
        :keyword enable_purge_protection: Property specifying whether protection against purge is
         enabled for this managed HSM pool. Setting this property to true activates protection against
         purge for this managed HSM pool and its content - only the Managed HSM service may initiate a
         hard, irrecoverable deletion. Enabling this functionality is irreversible.
        :paramtype enable_purge_protection: bool
        :keyword create_mode: The create mode to indicate whether the resource is being created or is
         being recovered from a deleted resource. Possible values include: "recover", "default".
        :paramtype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
        :keyword network_acls: Rules governing the accessibility of the key vault from specific network
         locations.
        :paramtype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMNetworkRuleSet
        :keyword regions: List of all regions associated with the managed hsm pool.
        :paramtype regions: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMGeoReplicatedRegion]
        :keyword public_network_access: Control permission to the managed HSM from public networks.
         Possible values include: "Enabled", "Disabled". Default value: "Enabled".
        :paramtype public_network_access: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PublicNetworkAccess
        """
        super(ManagedHsmProperties, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.initial_admin_object_ids = kwargs.get('initial_admin_object_ids', None)
        self.hsm_uri = None
        self.enable_soft_delete = kwargs.get('enable_soft_delete', True)
        self.soft_delete_retention_in_days = kwargs.get('soft_delete_retention_in_days', 90)
        self.enable_purge_protection = kwargs.get('enable_purge_protection', True)
        self.create_mode = kwargs.get('create_mode', None)
        self.status_message = None
        self.provisioning_state = None
        self.network_acls = kwargs.get('network_acls', None)
        self.regions = kwargs.get('regions', None)
        self.private_endpoint_connections = None
        self.public_network_access = kwargs.get('public_network_access', "Enabled")
        self.scheduled_purge_date = None
        self.security_domain_properties = None


class ManagedHsmRotationPolicy(msrest.serialization.Model):
    """ManagedHsmRotationPolicy.

    :ivar attributes: The attributes of key rotation policy.
    :vartype attributes:
     ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyRotationPolicyAttributes
    :ivar lifetime_actions: The lifetimeActions for key rotation action.
    :vartype lifetime_actions:
     list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmLifetimeAction]
    """

    _attribute_map = {
        'attributes': {'key': 'attributes', 'type': 'ManagedHsmKeyRotationPolicyAttributes'},
        'lifetime_actions': {'key': 'lifetimeActions', 'type': '[ManagedHsmLifetimeAction]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword attributes: The attributes of key rotation policy.
        :paramtype attributes:
         ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmKeyRotationPolicyAttributes
        :keyword lifetime_actions: The lifetimeActions for key rotation action.
        :paramtype lifetime_actions:
         list[~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmLifetimeAction]
        """
        super(ManagedHsmRotationPolicy, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.lifetime_actions = kwargs.get('lifetime_actions', None)


class ManagedHSMSecurityDomainProperties(msrest.serialization.Model):
    """The security domain properties of the managed hsm.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar activation_status: Activation Status. Possible values include: "Active", "NotActivated",
     "Unknown", "Failed".
    :vartype activation_status: str or ~azure.mgmt.keyvault.v2023_07_01.models.ActivationStatus
    :ivar activation_status_message: Activation Status Message.
    :vartype activation_status_message: str
    """

    _validation = {
        'activation_status': {'readonly': True},
        'activation_status_message': {'readonly': True},
    }

    _attribute_map = {
        'activation_status': {'key': 'activationStatus', 'type': 'str'},
        'activation_status_message': {'key': 'activationStatusMessage', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(ManagedHSMSecurityDomainProperties, self).__init__(**kwargs)
        self.activation_status = None
        self.activation_status_message = None


class ManagedHsmSku(msrest.serialization.Model):
    """SKU details.

    All required parameters must be populated in order to send to Azure.

    :ivar family: Required. SKU Family of the managed HSM Pool. Possible values include: "B".
    :vartype family: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSkuFamily
    :ivar name: Required. SKU of the managed HSM Pool. Possible values include: "Standard_B1",
     "Custom_B32", "Custom_B6".
    :vartype name: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSkuName
    """

    _validation = {
        'family': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'family': {'key': 'family', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword family: Required. SKU Family of the managed HSM Pool. Possible values include: "B".
        :paramtype family: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSkuFamily
        :keyword name: Required. SKU of the managed HSM Pool. Possible values include: "Standard_B1",
         "Custom_B32", "Custom_B6".
        :paramtype name: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSkuName
        """
        super(ManagedHsmSku, self).__init__(**kwargs)
        self.family = kwargs.get('family', "B")
        self.name = kwargs['name']


class ManagedHsmTrigger(msrest.serialization.Model):
    """ManagedHsmTrigger.

    :ivar time_after_create: The time duration after key creation to rotate the key. It only
     applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
    :vartype time_after_create: str
    :ivar time_before_expiry: The time duration before key expiring to rotate or notify. It will be
     in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
    :vartype time_before_expiry: str
    """

    _attribute_map = {
        'time_after_create': {'key': 'timeAfterCreate', 'type': 'str'},
        'time_before_expiry': {'key': 'timeBeforeExpiry', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_after_create: The time duration after key creation to rotate the key. It only
         applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
        :paramtype time_after_create: str
        :keyword time_before_expiry: The time duration before key expiring to rotate or notify. It will
         be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
        :paramtype time_before_expiry: str
        """
        super(ManagedHsmTrigger, self).__init__(**kwargs)
        self.time_after_create = kwargs.get('time_after_create', None)
        self.time_before_expiry = kwargs.get('time_before_expiry', None)


class ManagedServiceIdentity(msrest.serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Required. Type of managed service identity (where both SystemAssigned and
     UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
     "UserAssigned", "SystemAssigned,UserAssigned".
    :vartype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.keyvault.v2023_07_01.models.UserAssignedIdentity]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword type: Required. Type of managed service identity (where both SystemAssigned and
         UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
         "UserAssigned", "SystemAssigned,UserAssigned".
        :paramtype type: str or ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.keyvault.v2023_07_01.models.UserAssignedIdentity]
        """
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = kwargs['type']
        self.user_assigned_identities = kwargs.get('user_assigned_identities', None)


class MetricSpecification(msrest.serialization.Model):
    """Metric specification of operation.

    :ivar name: Name of metric specification.
    :vartype name: str
    :ivar display_name: Display name of metric specification.
    :vartype display_name: str
    :ivar display_description: Display description of metric specification.
    :vartype display_description: str
    :ivar unit: The metric unit. Possible values include: 'Bytes', 'Count', 'Milliseconds'.
    :vartype unit: str
    :ivar aggregation_type: The metric aggregation type. Possible values include: 'Average',
     'Count', 'Total'.
    :vartype aggregation_type: str
    :ivar supported_aggregation_types: The supported aggregation types for the metrics.
    :vartype supported_aggregation_types: list[str]
    :ivar supported_time_grain_types: The supported time grain types for the metrics.
    :vartype supported_time_grain_types: list[str]
    :ivar lock_aggregation_type: The metric lock aggregation type.
    :vartype lock_aggregation_type: str
    :ivar dimensions: The dimensions of metric.
    :vartype dimensions: list[~azure.mgmt.keyvault.v2023_07_01.models.DimensionProperties]
    :ivar fill_gap_with_zero: Property to specify whether to fill gap with zero.
    :vartype fill_gap_with_zero: bool
    :ivar internal_metric_name: The internal metric name.
    :vartype internal_metric_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'unit': {'key': 'unit', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'supported_aggregation_types': {'key': 'supportedAggregationTypes', 'type': '[str]'},
        'supported_time_grain_types': {'key': 'supportedTimeGrainTypes', 'type': '[str]'},
        'lock_aggregation_type': {'key': 'lockAggregationType', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[DimensionProperties]'},
        'fill_gap_with_zero': {'key': 'fillGapWithZero', 'type': 'bool'},
        'internal_metric_name': {'key': 'internalMetricName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of metric specification.
        :paramtype name: str
        :keyword display_name: Display name of metric specification.
        :paramtype display_name: str
        :keyword display_description: Display description of metric specification.
        :paramtype display_description: str
        :keyword unit: The metric unit. Possible values include: 'Bytes', 'Count', 'Milliseconds'.
        :paramtype unit: str
        :keyword aggregation_type: The metric aggregation type. Possible values include: 'Average',
         'Count', 'Total'.
        :paramtype aggregation_type: str
        :keyword supported_aggregation_types: The supported aggregation types for the metrics.
        :paramtype supported_aggregation_types: list[str]
        :keyword supported_time_grain_types: The supported time grain types for the metrics.
        :paramtype supported_time_grain_types: list[str]
        :keyword lock_aggregation_type: The metric lock aggregation type.
        :paramtype lock_aggregation_type: str
        :keyword dimensions: The dimensions of metric.
        :paramtype dimensions: list[~azure.mgmt.keyvault.v2023_07_01.models.DimensionProperties]
        :keyword fill_gap_with_zero: Property to specify whether to fill gap with zero.
        :paramtype fill_gap_with_zero: bool
        :keyword internal_metric_name: The internal metric name.
        :paramtype internal_metric_name: str
        """
        super(MetricSpecification, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display_name = kwargs.get('display_name', None)
        self.display_description = kwargs.get('display_description', None)
        self.unit = kwargs.get('unit', None)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.supported_aggregation_types = kwargs.get('supported_aggregation_types', None)
        self.supported_time_grain_types = kwargs.get('supported_time_grain_types', None)
        self.lock_aggregation_type = kwargs.get('lock_aggregation_type', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.fill_gap_with_zero = kwargs.get('fill_gap_with_zero', None)
        self.internal_metric_name = kwargs.get('internal_metric_name', None)


class MHSMGeoReplicatedRegion(msrest.serialization.Model):
    """A region that this managed HSM Pool has been extended to.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the geo replicated region.
    :vartype name: str
    :ivar provisioning_state: Provisioning state of the geo replicated region. Possible values
     include: "Preprovisioning", "Provisioning", "Succeeded", "Failed", "Deleting", "Cleanup".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.GeoReplicationRegionProvisioningState
    :ivar is_primary: A boolean value that indicates whether the region is the primary region or a
     secondary region.
    :vartype is_primary: bool
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'is_primary': {'key': 'isPrimary', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Name of the geo replicated region.
        :paramtype name: str
        :keyword is_primary: A boolean value that indicates whether the region is the primary region or
         a secondary region.
        :paramtype is_primary: bool
        """
        super(MHSMGeoReplicatedRegion, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.provisioning_state = None
        self.is_primary = kwargs.get('is_primary', None)


class MHSMIPRule(msrest.serialization.Model):
    """A rule governing the accessibility of a managed HSM pool from a specific IP address or IP range.

    All required parameters must be populated in order to send to Azure.

    :ivar value: Required. An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple
     IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
    :vartype value: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Required. An IPv4 address range in CIDR notation, such as '124.56.78.91'
         (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78).
        :paramtype value: str
        """
        super(MHSMIPRule, self).__init__(**kwargs)
        self.value = kwargs['value']


class MHSMNetworkRuleSet(msrest.serialization.Model):
    """A set of rules governing the network accessibility of a managed hsm pool.

    :ivar bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or
     'None'.  If not specified the default is 'AzureServices'. Possible values include:
     "AzureServices", "None".
    :vartype bypass: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleBypassOptions
    :ivar default_action: The default action when no rule from ipRules and from virtualNetworkRules
     match. This is only used after the bypass property has been evaluated. Possible values include:
     "Allow", "Deny".
    :vartype default_action: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleAction
    :ivar ip_rules: The list of IP address rules.
    :vartype ip_rules: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMIPRule]
    :ivar virtual_network_rules: The list of virtual network rules.
    :vartype virtual_network_rules:
     list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMVirtualNetworkRule]
    """

    _attribute_map = {
        'bypass': {'key': 'bypass', 'type': 'str'},
        'default_action': {'key': 'defaultAction', 'type': 'str'},
        'ip_rules': {'key': 'ipRules', 'type': '[MHSMIPRule]'},
        'virtual_network_rules': {'key': 'virtualNetworkRules', 'type': '[MHSMVirtualNetworkRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or
         'None'.  If not specified the default is 'AzureServices'. Possible values include:
         "AzureServices", "None".
        :paramtype bypass: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleBypassOptions
        :keyword default_action: The default action when no rule from ipRules and from
         virtualNetworkRules match. This is only used after the bypass property has been evaluated.
         Possible values include: "Allow", "Deny".
        :paramtype default_action: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleAction
        :keyword ip_rules: The list of IP address rules.
        :paramtype ip_rules: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMIPRule]
        :keyword virtual_network_rules: The list of virtual network rules.
        :paramtype virtual_network_rules:
         list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMVirtualNetworkRule]
        """
        super(MHSMNetworkRuleSet, self).__init__(**kwargs)
        self.bypass = kwargs.get('bypass', None)
        self.default_action = kwargs.get('default_action', None)
        self.ip_rules = kwargs.get('ip_rules', None)
        self.virtual_network_rules = kwargs.get('virtual_network_rules', None)


class MHSMPrivateEndpoint(msrest.serialization.Model):
    """Private endpoint object properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Full identifier of the private endpoint resource.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(MHSMPrivateEndpoint, self).__init__(**kwargs)
        self.id = None


class MHSMPrivateEndpointConnection(ManagedHsmResource):
    """Private endpoint connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Azure Resource Manager resource ID for the managed HSM Pool.
    :vartype id: str
    :ivar name: The name of the managed HSM Pool.
    :vartype name: str
    :ivar type: The resource type of the managed HSM Pool.
    :vartype type: str
    :ivar location: The supported Azure location where the managed HSM Pool should be created.
    :vartype location: str
    :ivar sku: SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the key vault
     resource.
    :vartype system_data: ~azure.mgmt.keyvault.v2023_07_01.models.SystemData
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
    :ivar etag: Modified whenever there is a change in the state of private endpoint connection.
    :vartype etag: str
    :ivar private_endpoint: Properties of the private endpoint object.
    :vartype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpoint
    :ivar private_link_service_connection_state: Approval state of the private link connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkServiceConnectionState
    :ivar provisioning_state: Provisioning state of the private endpoint connection. Possible
     values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ManagedHsmSku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'MHSMPrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'MHSMPrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: The supported Azure location where the managed HSM Pool should be created.
        :paramtype location: str
        :keyword sku: SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
        :keyword etag: Modified whenever there is a change in the state of private endpoint connection.
        :paramtype etag: str
        :keyword private_endpoint: Properties of the private endpoint object.
        :paramtype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpoint
        :keyword private_link_service_connection_state: Approval state of the private link connection.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkServiceConnectionState
        :keyword provisioning_state: Provisioning state of the private endpoint connection. Possible
         values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
        :paramtype provisioning_state: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
        """
        super(MHSMPrivateEndpointConnection, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.private_endpoint = kwargs.get('private_endpoint', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class MHSMPrivateEndpointConnectionItem(msrest.serialization.Model):
    """Private endpoint connection item.

    :ivar id: Id of private endpoint connection.
    :vartype id: str
    :ivar etag: Modified whenever there is a change in the state of private endpoint connection.
    :vartype etag: str
    :ivar private_endpoint: Properties of the private endpoint object.
    :vartype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpoint
    :ivar private_link_service_connection_state: Approval state of the private link connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkServiceConnectionState
    :ivar provisioning_state: Provisioning state of the private endpoint connection. Possible
     values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'MHSMPrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'MHSMPrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Id of private endpoint connection.
        :paramtype id: str
        :keyword etag: Modified whenever there is a change in the state of private endpoint connection.
        :paramtype etag: str
        :keyword private_endpoint: Properties of the private endpoint object.
        :paramtype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpoint
        :keyword private_link_service_connection_state: Approval state of the private link connection.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkServiceConnectionState
        :keyword provisioning_state: Provisioning state of the private endpoint connection. Possible
         values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
        :paramtype provisioning_state: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
        """
        super(MHSMPrivateEndpointConnectionItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.etag = kwargs.get('etag', None)
        self.private_endpoint = kwargs.get('private_endpoint', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class MHSMPrivateEndpointConnectionsListResult(msrest.serialization.Model):
    """List of private endpoint connections associated with a managed HSM Pools.

    :ivar value: The private endpoint connection associated with a managed HSM Pools.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpointConnection]
    :ivar next_link: The URL to get the next set of managed HSM Pools.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MHSMPrivateEndpointConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The private endpoint connection associated with a managed HSM Pools.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateEndpointConnection]
        :keyword next_link: The URL to get the next set of managed HSM Pools.
        :paramtype next_link: str
        """
        super(MHSMPrivateEndpointConnectionsListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class MHSMPrivateLinkResource(ManagedHsmResource):
    """A private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: The Azure Resource Manager resource ID for the managed HSM Pool.
    :vartype id: str
    :ivar name: The name of the managed HSM Pool.
    :vartype name: str
    :ivar type: The resource type of the managed HSM Pool.
    :vartype type: str
    :ivar location: The supported Azure location where the managed HSM Pool should be created.
    :vartype location: str
    :ivar sku: SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
    :ivar tags: A set of tags. Resource tags.
    :vartype tags: dict[str, str]
    :ivar system_data: Metadata pertaining to creation and last modification of the key vault
     resource.
    :vartype system_data: ~azure.mgmt.keyvault.v2023_07_01.models.SystemData
    :ivar identity: Managed service identity (system assigned and/or user assigned identities).
    :vartype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
    :ivar group_id: Group identifier of private link resource.
    :vartype group_id: str
    :ivar required_members: Required member names of private link resource.
    :vartype required_members: list[str]
    :ivar required_zone_names: Required DNS zone names of the the private link resource.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'ManagedHsmSku'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'properties.requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: The supported Azure location where the managed HSM Pool should be created.
        :paramtype location: str
        :keyword sku: SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedHsmSku
        :keyword tags: A set of tags. Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed service identity (system assigned and/or user assigned identities).
        :paramtype identity: ~azure.mgmt.keyvault.v2023_07_01.models.ManagedServiceIdentity
        :keyword required_zone_names: Required DNS zone names of the the private link resource.
        :paramtype required_zone_names: list[str]
        """
        super(MHSMPrivateLinkResource, self).__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = kwargs.get('required_zone_names', None)


class MHSMPrivateLinkResourceListResult(msrest.serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkResource]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MHSMPrivateLinkResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMPrivateLinkResource]
        """
        super(MHSMPrivateLinkResourceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class MHSMPrivateLinkServiceConnectionState(msrest.serialization.Model):
    """An object that represents the approval state of the private link connection.

    :ivar status: Indicates whether the connection has been approved, rejected or removed by the
     key vault owner. Possible values include: "Pending", "Approved", "Rejected", "Disconnected".
    :vartype status: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval or rejection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer. Possible values include: "None".
    :vartype actions_required: str or ~azure.mgmt.keyvault.v2023_07_01.models.ActionsRequired
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Indicates whether the connection has been approved, rejected or removed by the
         key vault owner. Possible values include: "Pending", "Approved", "Rejected", "Disconnected".
        :paramtype status: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval or rejection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer. Possible values include: "None".
        :paramtype actions_required: str or ~azure.mgmt.keyvault.v2023_07_01.models.ActionsRequired
        """
        super(MHSMPrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.description = kwargs.get('description', None)
        self.actions_required = kwargs.get('actions_required', None)


class MHSMRegionsListResult(msrest.serialization.Model):
    """List of regions associated with a managed HSM Pools.

    :ivar value: The region associated with a managed HSM Pools.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMGeoReplicatedRegion]
    :ivar next_link: The URL to get the next set of managed HSM Pools.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MHSMGeoReplicatedRegion]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The region associated with a managed HSM Pools.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.MHSMGeoReplicatedRegion]
        :keyword next_link: The URL to get the next set of managed HSM Pools.
        :paramtype next_link: str
        """
        super(MHSMRegionsListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class MHSMVirtualNetworkRule(msrest.serialization.Model):
    """A rule governing the accessibility of a managed hsm pool from a specific virtual network.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Full resource id of a vnet subnet, such as
     '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
    :vartype id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. Full resource id of a vnet subnet, such as
         '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        :paramtype id: str
        """
        super(MHSMVirtualNetworkRule, self).__init__(**kwargs)
        self.id = kwargs['id']


class NetworkRuleSet(msrest.serialization.Model):
    """A set of rules governing the network accessibility of a vault.

    :ivar bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or
     'None'.  If not specified the default is 'AzureServices'. Possible values include:
     "AzureServices", "None".
    :vartype bypass: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleBypassOptions
    :ivar default_action: The default action when no rule from ipRules and from virtualNetworkRules
     match. This is only used after the bypass property has been evaluated. Possible values include:
     "Allow", "Deny".
    :vartype default_action: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleAction
    :ivar ip_rules: The list of IP address rules.
    :vartype ip_rules: list[~azure.mgmt.keyvault.v2023_07_01.models.IPRule]
    :ivar virtual_network_rules: The list of virtual network rules.
    :vartype virtual_network_rules:
     list[~azure.mgmt.keyvault.v2023_07_01.models.VirtualNetworkRule]
    """

    _attribute_map = {
        'bypass': {'key': 'bypass', 'type': 'str'},
        'default_action': {'key': 'defaultAction', 'type': 'str'},
        'ip_rules': {'key': 'ipRules', 'type': '[IPRule]'},
        'virtual_network_rules': {'key': 'virtualNetworkRules', 'type': '[VirtualNetworkRule]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword bypass: Tells what traffic can bypass network rules. This can be 'AzureServices' or
         'None'.  If not specified the default is 'AzureServices'. Possible values include:
         "AzureServices", "None".
        :paramtype bypass: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleBypassOptions
        :keyword default_action: The default action when no rule from ipRules and from
         virtualNetworkRules match. This is only used after the bypass property has been evaluated.
         Possible values include: "Allow", "Deny".
        :paramtype default_action: str or ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleAction
        :keyword ip_rules: The list of IP address rules.
        :paramtype ip_rules: list[~azure.mgmt.keyvault.v2023_07_01.models.IPRule]
        :keyword virtual_network_rules: The list of virtual network rules.
        :paramtype virtual_network_rules:
         list[~azure.mgmt.keyvault.v2023_07_01.models.VirtualNetworkRule]
        """
        super(NetworkRuleSet, self).__init__(**kwargs)
        self.bypass = kwargs.get('bypass', None)
        self.default_action = kwargs.get('default_action', None)
        self.ip_rules = kwargs.get('ip_rules', None)
        self.virtual_network_rules = kwargs.get('virtual_network_rules', None)


class Operation(msrest.serialization.Model):
    """Key Vault REST API operation definition.

    :ivar name: Operation name: {provider}/{resource}/{operation}.
    :vartype name: str
    :ivar display: Display metadata associated with the operation.
    :vartype display: ~azure.mgmt.keyvault.v2023_07_01.models.OperationDisplay
    :ivar origin: The origin of operations.
    :vartype origin: str
    :ivar is_data_action: Property to specify whether the action is a data action.
    :vartype is_data_action: bool
    :ivar service_specification: One property of operation, include metric specifications.
    :vartype service_specification: ~azure.mgmt.keyvault.v2023_07_01.models.ServiceSpecification
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'service_specification': {'key': 'properties.serviceSpecification', 'type': 'ServiceSpecification'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Operation name: {provider}/{resource}/{operation}.
        :paramtype name: str
        :keyword display: Display metadata associated with the operation.
        :paramtype display: ~azure.mgmt.keyvault.v2023_07_01.models.OperationDisplay
        :keyword origin: The origin of operations.
        :paramtype origin: str
        :keyword is_data_action: Property to specify whether the action is a data action.
        :paramtype is_data_action: bool
        :keyword service_specification: One property of operation, include metric specifications.
        :paramtype service_specification: ~azure.mgmt.keyvault.v2023_07_01.models.ServiceSpecification
        """
        super(Operation, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.is_data_action = kwargs.get('is_data_action', None)
        self.service_specification = kwargs.get('service_specification', None)


class OperationDisplay(msrest.serialization.Model):
    """Display metadata associated with the operation.

    :ivar provider: Service provider: Microsoft Key Vault.
    :vartype provider: str
    :ivar resource: Resource on which the operation is performed etc.
    :vartype resource: str
    :ivar operation: Type of operation: get, read, delete, etc.
    :vartype operation: str
    :ivar description: Description of operation.
    :vartype description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword provider: Service provider: Microsoft Key Vault.
        :paramtype provider: str
        :keyword resource: Resource on which the operation is performed etc.
        :paramtype resource: str
        :keyword operation: Type of operation: get, read, delete, etc.
        :paramtype operation: str
        :keyword description: Description of operation.
        :paramtype description: str
        """
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationListResult(msrest.serialization.Model):
    """Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.

    :ivar value: List of Storage operations supported by the Storage resource provider.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Operation]
    :ivar next_link: The URL to get the next set of operations.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: List of Storage operations supported by the Storage resource provider.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Operation]
        :keyword next_link: The URL to get the next set of operations.
        :paramtype next_link: str
        """
        super(OperationListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class Permissions(msrest.serialization.Model):
    """Permissions the identity has for keys, secrets, certificates and storage.

    :ivar keys: Permissions to keys.
    :vartype keys: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyPermissions]
    :ivar secrets: Permissions to secrets.
    :vartype secrets: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.SecretPermissions]
    :ivar certificates: Permissions to certificates.
    :vartype certificates: list[str or
     ~azure.mgmt.keyvault.v2023_07_01.models.CertificatePermissions]
    :ivar storage: Permissions to storage accounts.
    :vartype storage: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.StoragePermissions]
    """

    _attribute_map = {
        'keys': {'key': 'keys', 'type': '[str]'},
        'secrets': {'key': 'secrets', 'type': '[str]'},
        'certificates': {'key': 'certificates', 'type': '[str]'},
        'storage': {'key': 'storage', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword keys: Permissions to keys.
        :paramtype keys: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.KeyPermissions]
        :keyword secrets: Permissions to secrets.
        :paramtype secrets: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.SecretPermissions]
        :keyword certificates: Permissions to certificates.
        :paramtype certificates: list[str or
         ~azure.mgmt.keyvault.v2023_07_01.models.CertificatePermissions]
        :keyword storage: Permissions to storage accounts.
        :paramtype storage: list[str or ~azure.mgmt.keyvault.v2023_07_01.models.StoragePermissions]
        """
        super(Permissions, self).__init__(**kwargs)
        self.keys = kwargs.get('keys', None)
        self.secrets = kwargs.get('secrets', None)
        self.certificates = kwargs.get('certificates', None)
        self.storage = kwargs.get('storage', None)


class PrivateEndpoint(msrest.serialization.Model):
    """Private endpoint object properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Full identifier of the private endpoint resource.
    :vartype id: str
    """

    _validation = {
        'id': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(PrivateEndpoint, self).__init__(**kwargs)
        self.id = None


class PrivateEndpointConnection(Resource):
    """Private endpoint connection resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    :ivar etag: Modified whenever there is a change in the state of private endpoint connection.
    :vartype etag: str
    :ivar private_endpoint: Properties of the private endpoint object.
    :vartype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpoint
    :ivar private_link_service_connection_state: Approval state of the private link connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: Provisioning state of the private endpoint connection. Possible
     values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword etag: Modified whenever there is a change in the state of private endpoint connection.
        :paramtype etag: str
        :keyword private_endpoint: Properties of the private endpoint object.
        :paramtype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpoint
        :keyword private_link_service_connection_state: Approval state of the private link connection.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkServiceConnectionState
        :keyword provisioning_state: Provisioning state of the private endpoint connection. Possible
         values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
        :paramtype provisioning_state: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
        """
        super(PrivateEndpointConnection, self).__init__(**kwargs)
        self.etag = kwargs.get('etag', None)
        self.private_endpoint = kwargs.get('private_endpoint', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PrivateEndpointConnectionItem(msrest.serialization.Model):
    """Private endpoint connection item.

    :ivar id: Id of private endpoint connection.
    :vartype id: str
    :ivar etag: Modified whenever there is a change in the state of private endpoint connection.
    :vartype etag: str
    :ivar private_endpoint: Properties of the private endpoint object.
    :vartype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpoint
    :ivar private_link_service_connection_state: Approval state of the private link connection.
    :vartype private_link_service_connection_state:
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkServiceConnectionState
    :ivar provisioning_state: Provisioning state of the private endpoint connection. Possible
     values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'private_endpoint': {'key': 'properties.privateEndpoint', 'type': 'PrivateEndpoint'},
        'private_link_service_connection_state': {'key': 'properties.privateLinkServiceConnectionState', 'type': 'PrivateLinkServiceConnectionState'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Id of private endpoint connection.
        :paramtype id: str
        :keyword etag: Modified whenever there is a change in the state of private endpoint connection.
        :paramtype etag: str
        :keyword private_endpoint: Properties of the private endpoint object.
        :paramtype private_endpoint: ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpoint
        :keyword private_link_service_connection_state: Approval state of the private link connection.
        :paramtype private_link_service_connection_state:
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkServiceConnectionState
        :keyword provisioning_state: Provisioning state of the private endpoint connection. Possible
         values include: "Succeeded", "Creating", "Updating", "Deleting", "Failed", "Disconnected".
        :paramtype provisioning_state: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionProvisioningState
        """
        super(PrivateEndpointConnectionItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.etag = kwargs.get('etag', None)
        self.private_endpoint = kwargs.get('private_endpoint', None)
        self.private_link_service_connection_state = kwargs.get('private_link_service_connection_state', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)


class PrivateEndpointConnectionListResult(msrest.serialization.Model):
    """List of private endpoint connections.

    :ivar value: The list of private endpoint connections.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnection]
    :ivar next_link: The URL to get the next set of private endpoint connections.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateEndpointConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of private endpoint connections.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnection]
        :keyword next_link: The URL to get the next set of private endpoint connections.
        :paramtype next_link: str
        """
        super(PrivateEndpointConnectionListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class PrivateLinkResource(Resource):
    """A private link resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    :ivar group_id: Group identifier of private link resource.
    :vartype group_id: str
    :ivar required_members: Required member names of private link resource.
    :vartype required_members: list[str]
    :ivar required_zone_names: Required DNS zone names of the the private link resource.
    :vartype required_zone_names: list[str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
        'group_id': {'readonly': True},
        'required_members': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'required_members': {'key': 'properties.requiredMembers', 'type': '[str]'},
        'required_zone_names': {'key': 'properties.requiredZoneNames', 'type': '[str]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword required_zone_names: Required DNS zone names of the the private link resource.
        :paramtype required_zone_names: list[str]
        """
        super(PrivateLinkResource, self).__init__(**kwargs)
        self.group_id = None
        self.required_members = None
        self.required_zone_names = kwargs.get('required_zone_names', None)


class PrivateLinkResourceListResult(msrest.serialization.Model):
    """A list of private link resources.

    :ivar value: Array of private link resources.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkResource]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[PrivateLinkResource]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: Array of private link resources.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.PrivateLinkResource]
        """
        super(PrivateLinkResourceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)


class PrivateLinkServiceConnectionState(msrest.serialization.Model):
    """An object that represents the approval state of the private link connection.

    :ivar status: Indicates whether the connection has been approved, rejected or removed by the
     key vault owner. Possible values include: "Pending", "Approved", "Rejected", "Disconnected".
    :vartype status: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointServiceConnectionStatus
    :ivar description: The reason for approval or rejection.
    :vartype description: str
    :ivar actions_required: A message indicating if changes on the service provider require any
     updates on the consumer. Possible values include: "None".
    :vartype actions_required: str or ~azure.mgmt.keyvault.v2023_07_01.models.ActionsRequired
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'actions_required': {'key': 'actionsRequired', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword status: Indicates whether the connection has been approved, rejected or removed by the
         key vault owner. Possible values include: "Pending", "Approved", "Rejected", "Disconnected".
        :paramtype status: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointServiceConnectionStatus
        :keyword description: The reason for approval or rejection.
        :paramtype description: str
        :keyword actions_required: A message indicating if changes on the service provider require any
         updates on the consumer. Possible values include: "None".
        :paramtype actions_required: str or ~azure.mgmt.keyvault.v2023_07_01.models.ActionsRequired
        """
        super(PrivateLinkServiceConnectionState, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.description = kwargs.get('description', None)
        self.actions_required = kwargs.get('actions_required', None)


class ResourceListResult(msrest.serialization.Model):
    """List of vault resources.

    :ivar value: The list of vault resources.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Resource]
    :ivar next_link: The URL to get the next set of vault resources.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Resource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of vault resources.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Resource]
        :keyword next_link: The URL to get the next set of vault resources.
        :paramtype next_link: str
        """
        super(ResourceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class RotationPolicy(msrest.serialization.Model):
    """RotationPolicy.

    :ivar attributes: The attributes of key rotation policy.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyAttributes
    :ivar lifetime_actions: The lifetimeActions for key rotation action.
    :vartype lifetime_actions: list[~azure.mgmt.keyvault.v2023_07_01.models.LifetimeAction]
    """

    _attribute_map = {
        'attributes': {'key': 'attributes', 'type': 'KeyRotationPolicyAttributes'},
        'lifetime_actions': {'key': 'lifetimeActions', 'type': '[LifetimeAction]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword attributes: The attributes of key rotation policy.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.KeyRotationPolicyAttributes
        :keyword lifetime_actions: The lifetimeActions for key rotation action.
        :paramtype lifetime_actions: list[~azure.mgmt.keyvault.v2023_07_01.models.LifetimeAction]
        """
        super(RotationPolicy, self).__init__(**kwargs)
        self.attributes = kwargs.get('attributes', None)
        self.lifetime_actions = kwargs.get('lifetime_actions', None)


class Secret(Resource):
    """Resource information with extended details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    :ivar properties: Required. Properties of the secret.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'tags': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'SecretProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Required. Properties of the secret.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretProperties
        """
        super(Secret, self).__init__(**kwargs)
        self.properties = kwargs['properties']


class SecretAttributes(Attributes):
    """The secret management attributes.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar enabled: Determines whether the object is enabled.
    :vartype enabled: bool
    :ivar not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
    :vartype not_before: ~datetime.datetime
    :ivar expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
    :vartype expires: ~datetime.datetime
    :ivar created: Creation time in seconds since 1970-01-01T00:00:00Z.
    :vartype created: ~datetime.datetime
    :ivar updated: Last updated time in seconds since 1970-01-01T00:00:00Z.
    :vartype updated: ~datetime.datetime
    """

    _validation = {
        'created': {'readonly': True},
        'updated': {'readonly': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'not_before': {'key': 'nbf', 'type': 'unix-time'},
        'expires': {'key': 'exp', 'type': 'unix-time'},
        'created': {'key': 'created', 'type': 'unix-time'},
        'updated': {'key': 'updated', 'type': 'unix-time'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword enabled: Determines whether the object is enabled.
        :paramtype enabled: bool
        :keyword not_before: Not before date in seconds since 1970-01-01T00:00:00Z.
        :paramtype not_before: ~datetime.datetime
        :keyword expires: Expiry date in seconds since 1970-01-01T00:00:00Z.
        :paramtype expires: ~datetime.datetime
        """
        super(SecretAttributes, self).__init__(**kwargs)


class SecretCreateOrUpdateParameters(msrest.serialization.Model):
    """Parameters for creating or updating a secret.

    All required parameters must be populated in order to send to Azure.

    :ivar tags: A set of tags. The tags that will be assigned to the secret.
    :vartype tags: dict[str, str]
    :ivar properties: Required. Properties of the secret.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretProperties
    """

    _validation = {
        'properties': {'required': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'SecretProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags that will be assigned to the secret.
        :paramtype tags: dict[str, str]
        :keyword properties: Required. Properties of the secret.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretProperties
        """
        super(SecretCreateOrUpdateParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs['properties']


class SecretListResult(msrest.serialization.Model):
    """List of secrets.

    :ivar value: The list of secrets.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Secret]
    :ivar next_link: The URL to get the next set of secrets.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Secret]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of secrets.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Secret]
        :keyword next_link: The URL to get the next set of secrets.
        :paramtype next_link: str
        """
        super(SecretListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class SecretPatchParameters(msrest.serialization.Model):
    """Parameters for patching a secret.

    :ivar tags: A set of tags. The tags that will be assigned to the secret.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the secret.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretPatchProperties
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'SecretPatchProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags that will be assigned to the secret.
        :paramtype tags: dict[str, str]
        :keyword properties: Properties of the secret.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.SecretPatchProperties
        """
        super(SecretPatchParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)


class SecretPatchProperties(msrest.serialization.Model):
    """Properties of the secret.

    :ivar value: The value of the secret.
    :vartype value: str
    :ivar content_type: The content type of the secret.
    :vartype content_type: str
    :ivar attributes: The attributes of the secret.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.SecretAttributes
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'attributes': {'key': 'attributes', 'type': 'SecretAttributes'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The value of the secret.
        :paramtype value: str
        :keyword content_type: The content type of the secret.
        :paramtype content_type: str
        :keyword attributes: The attributes of the secret.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.SecretAttributes
        """
        super(SecretPatchProperties, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.content_type = kwargs.get('content_type', None)
        self.attributes = kwargs.get('attributes', None)


class SecretProperties(msrest.serialization.Model):
    """Properties of the secret.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The value of the secret. NOTE: 'value' will never be returned from the service, as
     APIs using this model are is intended for internal use in ARM deployments. Users should use the
     data-plane REST service for interaction with vault secrets.
    :vartype value: str
    :ivar content_type: The content type of the secret.
    :vartype content_type: str
    :ivar attributes: The attributes of the secret.
    :vartype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.SecretAttributes
    :ivar secret_uri: The URI to retrieve the current version of the secret.
    :vartype secret_uri: str
    :ivar secret_uri_with_version: The URI to retrieve the specific version of the secret.
    :vartype secret_uri_with_version: str
    """

    _validation = {
        'secret_uri': {'readonly': True},
        'secret_uri_with_version': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'content_type': {'key': 'contentType', 'type': 'str'},
        'attributes': {'key': 'attributes', 'type': 'SecretAttributes'},
        'secret_uri': {'key': 'secretUri', 'type': 'str'},
        'secret_uri_with_version': {'key': 'secretUriWithVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The value of the secret. NOTE: 'value' will never be returned from the service,
         as APIs using this model are is intended for internal use in ARM deployments. Users should use
         the data-plane REST service for interaction with vault secrets.
        :paramtype value: str
        :keyword content_type: The content type of the secret.
        :paramtype content_type: str
        :keyword attributes: The attributes of the secret.
        :paramtype attributes: ~azure.mgmt.keyvault.v2023_07_01.models.SecretAttributes
        """
        super(SecretProperties, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.content_type = kwargs.get('content_type', None)
        self.attributes = kwargs.get('attributes', None)
        self.secret_uri = None
        self.secret_uri_with_version = None


class ServiceSpecification(msrest.serialization.Model):
    """One property of operation, include log specifications.

    :ivar log_specifications: Log specifications of operation.
    :vartype log_specifications: list[~azure.mgmt.keyvault.v2023_07_01.models.LogSpecification]
    :ivar metric_specifications: Metric specifications of operation.
    :vartype metric_specifications:
     list[~azure.mgmt.keyvault.v2023_07_01.models.MetricSpecification]
    """

    _attribute_map = {
        'log_specifications': {'key': 'logSpecifications', 'type': '[LogSpecification]'},
        'metric_specifications': {'key': 'metricSpecifications', 'type': '[MetricSpecification]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword log_specifications: Log specifications of operation.
        :paramtype log_specifications: list[~azure.mgmt.keyvault.v2023_07_01.models.LogSpecification]
        :keyword metric_specifications: Metric specifications of operation.
        :paramtype metric_specifications:
         list[~azure.mgmt.keyvault.v2023_07_01.models.MetricSpecification]
        """
        super(ServiceSpecification, self).__init__(**kwargs)
        self.log_specifications = kwargs.get('log_specifications', None)
        self.metric_specifications = kwargs.get('metric_specifications', None)


class Sku(msrest.serialization.Model):
    """SKU details.

    All required parameters must be populated in order to send to Azure.

    :ivar family: Required. SKU family name. Possible values include: "A". Default value: "A".
    :vartype family: str or ~azure.mgmt.keyvault.v2023_07_01.models.SkuFamily
    :ivar name: Required. SKU name to specify whether the key vault is a standard vault or a
     premium vault. Possible values include: "standard", "premium".
    :vartype name: str or ~azure.mgmt.keyvault.v2023_07_01.models.SkuName
    """

    _validation = {
        'family': {'required': True},
        'name': {'required': True},
    }

    _attribute_map = {
        'family': {'key': 'family', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword family: Required. SKU family name. Possible values include: "A". Default value: "A".
        :paramtype family: str or ~azure.mgmt.keyvault.v2023_07_01.models.SkuFamily
        :keyword name: Required. SKU name to specify whether the key vault is a standard vault or a
         premium vault. Possible values include: "standard", "premium".
        :paramtype name: str or ~azure.mgmt.keyvault.v2023_07_01.models.SkuName
        """
        super(Sku, self).__init__(**kwargs)
        self.family = kwargs.get('family', "A")
        self.name = kwargs['name']


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the key vault resource.

    :ivar created_by: The identity that created the key vault resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the key vault resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype created_by_type: str or ~azure.mgmt.keyvault.v2023_07_01.models.IdentityType
    :ivar created_at: The timestamp of the key vault resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the key vault resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the key vault resource.
     Possible values include: "User", "Application", "ManagedIdentity", "Key".
    :vartype last_modified_by_type: str or ~azure.mgmt.keyvault.v2023_07_01.models.IdentityType
    :ivar last_modified_at: The timestamp of the key vault resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword created_by: The identity that created the key vault resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the key vault resource. Possible
         values include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype created_by_type: str or ~azure.mgmt.keyvault.v2023_07_01.models.IdentityType
        :keyword created_at: The timestamp of the key vault resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the key vault resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the key vault resource.
         Possible values include: "User", "Application", "ManagedIdentity", "Key".
        :paramtype last_modified_by_type: str or ~azure.mgmt.keyvault.v2023_07_01.models.IdentityType
        :keyword last_modified_at: The timestamp of the key vault resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class Trigger(msrest.serialization.Model):
    """Trigger.

    :ivar time_after_create: The time duration after key creation to rotate the key. It only
     applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
    :vartype time_after_create: str
    :ivar time_before_expiry: The time duration before key expiring to rotate or notify. It will be
     in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
    :vartype time_before_expiry: str
    """

    _attribute_map = {
        'time_after_create': {'key': 'timeAfterCreate', 'type': 'str'},
        'time_before_expiry': {'key': 'timeBeforeExpiry', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword time_after_create: The time duration after key creation to rotate the key. It only
         applies to rotate. It will be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
        :paramtype time_after_create: str
        :keyword time_before_expiry: The time duration before key expiring to rotate or notify. It will
         be in ISO 8601 duration format. Eg: 'P90D', 'P1Y'.
        :paramtype time_before_expiry: str
        """
        super(Trigger, self).__init__(**kwargs)
        self.time_after_create = kwargs.get('time_after_create', None)
        self.time_before_expiry = kwargs.get('time_before_expiry', None)


class UserAssignedIdentity(msrest.serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        """
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class Vault(msrest.serialization.Model):
    """Resource information with extended details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified identifier of the key vault resource.
    :vartype id: str
    :ivar name: Name of the key vault resource.
    :vartype name: str
    :ivar type: Resource type of the key vault resource.
    :vartype type: str
    :ivar location: Azure location of the key vault resource.
    :vartype location: str
    :ivar tags: A set of tags. Tags assigned to the key vault resource.
    :vartype tags: dict[str, str]
    :ivar system_data: System metadata for the key vault.
    :vartype system_data: ~azure.mgmt.keyvault.v2023_07_01.models.SystemData
    :ivar properties: Required. Properties of the vault.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'properties': {'key': 'properties', 'type': 'VaultProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Azure location of the key vault resource.
        :paramtype location: str
        :keyword tags: A set of tags. Tags assigned to the key vault resource.
        :paramtype tags: dict[str, str]
        :keyword properties: Required. Properties of the vault.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultProperties
        """
        super(Vault, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = None
        self.properties = kwargs['properties']


class VaultAccessPolicyParameters(msrest.serialization.Model):
    """Parameters for updating the access policy in a vault.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: The resource id of the access policy.
    :vartype id: str
    :ivar name: The resource name of the access policy.
    :vartype name: str
    :ivar type: The resource name of the access policy.
    :vartype type: str
    :ivar location: The resource type of the access policy.
    :vartype location: str
    :ivar properties: Required. Properties of the access policy.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultAccessPolicyProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VaultAccessPolicyProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword properties: Required. Properties of the access policy.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultAccessPolicyProperties
        """
        super(VaultAccessPolicyParameters, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = None
        self.properties = kwargs['properties']


class VaultAccessPolicyProperties(msrest.serialization.Model):
    """Properties of the vault access policy.

    All required parameters must be populated in order to send to Azure.

    :ivar access_policies: Required. An array of 0 to 16 identities that have access to the key
     vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
    :vartype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
    """

    _validation = {
        'access_policies': {'required': True},
    }

    _attribute_map = {
        'access_policies': {'key': 'accessPolicies', 'type': '[AccessPolicyEntry]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword access_policies: Required. An array of 0 to 16 identities that have access to the key
         vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.
        :paramtype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
        """
        super(VaultAccessPolicyProperties, self).__init__(**kwargs)
        self.access_policies = kwargs['access_policies']


class VaultCheckNameAvailabilityParameters(msrest.serialization.Model):
    """The parameters used to check the availability of the vault name.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Required. The vault name.
    :vartype name: str
    :ivar type: The type of resource, Microsoft.KeyVault/vaults. Has constant value:
     "Microsoft.KeyVault/vaults".
    :vartype type: str
    """

    _validation = {
        'name': {'required': True},
        'type': {'required': True, 'constant': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    type = "Microsoft.KeyVault/vaults"

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword name: Required. The vault name.
        :paramtype name: str
        """
        super(VaultCheckNameAvailabilityParameters, self).__init__(**kwargs)
        self.name = kwargs['name']


class VaultCreateOrUpdateParameters(msrest.serialization.Model):
    """Parameters for creating or updating a vault.

    All required parameters must be populated in order to send to Azure.

    :ivar location: Required. The supported Azure location where the key vault should be created.
    :vartype location: str
    :ivar tags: A set of tags. The tags that will be assigned to the key vault.
    :vartype tags: dict[str, str]
    :ivar properties: Required. Properties of the vault.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultProperties
    """

    _validation = {
        'location': {'required': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'VaultProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword location: Required. The supported Azure location where the key vault should be
         created.
        :paramtype location: str
        :keyword tags: A set of tags. The tags that will be assigned to the key vault.
        :paramtype tags: dict[str, str]
        :keyword properties: Required. Properties of the vault.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultProperties
        """
        super(VaultCreateOrUpdateParameters, self).__init__(**kwargs)
        self.location = kwargs['location']
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs['properties']


class VaultListResult(msrest.serialization.Model):
    """List of vaults.

    :ivar value: The list of vaults.
    :vartype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Vault]
    :ivar next_link: The URL to get the next set of vaults.
    :vartype next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Vault]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword value: The list of vaults.
        :paramtype value: list[~azure.mgmt.keyvault.v2023_07_01.models.Vault]
        :keyword next_link: The URL to get the next set of vaults.
        :paramtype next_link: str
        """
        super(VaultListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class VaultPatchParameters(msrest.serialization.Model):
    """Parameters for creating or updating a vault.

    :ivar tags: A set of tags. The tags that will be assigned to the key vault.
    :vartype tags: dict[str, str]
    :ivar properties: Properties of the vault.
    :vartype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultPatchProperties
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'VaultPatchProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tags: A set of tags. The tags that will be assigned to the key vault.
        :paramtype tags: dict[str, str]
        :keyword properties: Properties of the vault.
        :paramtype properties: ~azure.mgmt.keyvault.v2023_07_01.models.VaultPatchProperties
        """
        super(VaultPatchParameters, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.properties = kwargs.get('properties', None)


class VaultPatchProperties(msrest.serialization.Model):
    """Properties of the vault.

    :ivar tenant_id: The Azure Active Directory tenant ID that should be used for authenticating
     requests to the key vault.
    :vartype tenant_id: str
    :ivar sku: SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.Sku
    :ivar access_policies: An array of 0 to 16 identities that have access to the key vault. All
     identities in the array must use the same tenant ID as the key vault's tenant ID.
    :vartype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
    :ivar enabled_for_deployment: Property to specify whether Azure Virtual Machines are permitted
     to retrieve certificates stored as secrets from the key vault.
    :vartype enabled_for_deployment: bool
    :ivar enabled_for_disk_encryption: Property to specify whether Azure Disk Encryption is
     permitted to retrieve secrets from the vault and unwrap keys.
    :vartype enabled_for_disk_encryption: bool
    :ivar enabled_for_template_deployment: Property to specify whether Azure Resource Manager is
     permitted to retrieve secrets from the key vault.
    :vartype enabled_for_template_deployment: bool
    :ivar enable_soft_delete: Property to specify whether the 'soft delete' functionality is
     enabled for this key vault. Once set to true, it cannot be reverted to false.
    :vartype enable_soft_delete: bool
    :ivar enable_rbac_authorization: Property that controls how data actions are authorized. When
     true, the key vault will use Role Based Access Control (RBAC) for authorization of data
     actions, and the access policies specified in vault properties will be  ignored. When false,
     the key vault will use the access policies specified in vault properties, and any policy stored
     on Azure Resource Manager will be ignored. If null or not specified, the value of this property
     will not change.
    :vartype enable_rbac_authorization: bool
    :ivar soft_delete_retention_in_days: softDelete data retention days. It accepts >=7 and <=90.
    :vartype soft_delete_retention_in_days: int
    :ivar create_mode: The vault's create mode to indicate whether the vault need to be recovered
     or not. Possible values include: "recover", "default".
    :vartype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
    :ivar enable_purge_protection: Property specifying whether protection against purge is enabled
     for this vault. Setting this property to true activates protection against purge for this vault
     and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The
     setting is effective only if soft delete is also enabled. Enabling this functionality is
     irreversible - that is, the property does not accept false as its value.
    :vartype enable_purge_protection: bool
    :ivar network_acls: A collection of rules governing the accessibility of the vault from
     specific network locations.
    :vartype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleSet
    :ivar public_network_access: Property to specify whether the vault will accept traffic from
     public internet. If set to 'disabled' all traffic except private endpoint traffic and that that
     originates from trusted services will be blocked. This will override the set firewall rules,
     meaning that even if the firewall rules are present we will not honor the rules.
    :vartype public_network_access: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'access_policies': {'key': 'accessPolicies', 'type': '[AccessPolicyEntry]'},
        'enabled_for_deployment': {'key': 'enabledForDeployment', 'type': 'bool'},
        'enabled_for_disk_encryption': {'key': 'enabledForDiskEncryption', 'type': 'bool'},
        'enabled_for_template_deployment': {'key': 'enabledForTemplateDeployment', 'type': 'bool'},
        'enable_soft_delete': {'key': 'enableSoftDelete', 'type': 'bool'},
        'enable_rbac_authorization': {'key': 'enableRbacAuthorization', 'type': 'bool'},
        'soft_delete_retention_in_days': {'key': 'softDeleteRetentionInDays', 'type': 'int'},
        'create_mode': {'key': 'createMode', 'type': 'str'},
        'enable_purge_protection': {'key': 'enablePurgeProtection', 'type': 'bool'},
        'network_acls': {'key': 'networkAcls', 'type': 'NetworkRuleSet'},
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: The Azure Active Directory tenant ID that should be used for authenticating
         requests to the key vault.
        :paramtype tenant_id: str
        :keyword sku: SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.Sku
        :keyword access_policies: An array of 0 to 16 identities that have access to the key vault. All
         identities in the array must use the same tenant ID as the key vault's tenant ID.
        :paramtype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
        :keyword enabled_for_deployment: Property to specify whether Azure Virtual Machines are
         permitted to retrieve certificates stored as secrets from the key vault.
        :paramtype enabled_for_deployment: bool
        :keyword enabled_for_disk_encryption: Property to specify whether Azure Disk Encryption is
         permitted to retrieve secrets from the vault and unwrap keys.
        :paramtype enabled_for_disk_encryption: bool
        :keyword enabled_for_template_deployment: Property to specify whether Azure Resource Manager is
         permitted to retrieve secrets from the key vault.
        :paramtype enabled_for_template_deployment: bool
        :keyword enable_soft_delete: Property to specify whether the 'soft delete' functionality is
         enabled for this key vault. Once set to true, it cannot be reverted to false.
        :paramtype enable_soft_delete: bool
        :keyword enable_rbac_authorization: Property that controls how data actions are authorized.
         When true, the key vault will use Role Based Access Control (RBAC) for authorization of data
         actions, and the access policies specified in vault properties will be  ignored. When false,
         the key vault will use the access policies specified in vault properties, and any policy stored
         on Azure Resource Manager will be ignored. If null or not specified, the value of this property
         will not change.
        :paramtype enable_rbac_authorization: bool
        :keyword soft_delete_retention_in_days: softDelete data retention days. It accepts >=7 and
         <=90.
        :paramtype soft_delete_retention_in_days: int
        :keyword create_mode: The vault's create mode to indicate whether the vault need to be
         recovered or not. Possible values include: "recover", "default".
        :paramtype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
        :keyword enable_purge_protection: Property specifying whether protection against purge is
         enabled for this vault. Setting this property to true activates protection against purge for
         this vault and its content - only the Key Vault service may initiate a hard, irrecoverable
         deletion. The setting is effective only if soft delete is also enabled. Enabling this
         functionality is irreversible - that is, the property does not accept false as its value.
        :paramtype enable_purge_protection: bool
        :keyword network_acls: A collection of rules governing the accessibility of the vault from
         specific network locations.
        :paramtype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleSet
        :keyword public_network_access: Property to specify whether the vault will accept traffic from
         public internet. If set to 'disabled' all traffic except private endpoint traffic and that that
         originates from trusted services will be blocked. This will override the set firewall rules,
         meaning that even if the firewall rules are present we will not honor the rules.
        :paramtype public_network_access: str
        """
        super(VaultPatchProperties, self).__init__(**kwargs)
        self.tenant_id = kwargs.get('tenant_id', None)
        self.sku = kwargs.get('sku', None)
        self.access_policies = kwargs.get('access_policies', None)
        self.enabled_for_deployment = kwargs.get('enabled_for_deployment', None)
        self.enabled_for_disk_encryption = kwargs.get('enabled_for_disk_encryption', None)
        self.enabled_for_template_deployment = kwargs.get('enabled_for_template_deployment', None)
        self.enable_soft_delete = kwargs.get('enable_soft_delete', None)
        self.enable_rbac_authorization = kwargs.get('enable_rbac_authorization', None)
        self.soft_delete_retention_in_days = kwargs.get('soft_delete_retention_in_days', None)
        self.create_mode = kwargs.get('create_mode', None)
        self.enable_purge_protection = kwargs.get('enable_purge_protection', None)
        self.network_acls = kwargs.get('network_acls', None)
        self.public_network_access = kwargs.get('public_network_access', None)


class VaultProperties(msrest.serialization.Model):
    """Properties of the vault.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar tenant_id: Required. The Azure Active Directory tenant ID that should be used for
     authenticating requests to the key vault.
    :vartype tenant_id: str
    :ivar sku: Required. SKU details.
    :vartype sku: ~azure.mgmt.keyvault.v2023_07_01.models.Sku
    :ivar access_policies: An array of 0 to 1024 identities that have access to the key vault. All
     identities in the array must use the same tenant ID as the key vault's tenant ID. When
     ``createMode`` is set to ``recover``\ , access policies are not required. Otherwise, access
     policies are required.
    :vartype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
    :ivar vault_uri: The URI of the vault for performing operations on keys and secrets.
    :vartype vault_uri: str
    :ivar hsm_pool_resource_id: The resource id of HSM Pool.
    :vartype hsm_pool_resource_id: str
    :ivar enabled_for_deployment: Property to specify whether Azure Virtual Machines are permitted
     to retrieve certificates stored as secrets from the key vault.
    :vartype enabled_for_deployment: bool
    :ivar enabled_for_disk_encryption: Property to specify whether Azure Disk Encryption is
     permitted to retrieve secrets from the vault and unwrap keys.
    :vartype enabled_for_disk_encryption: bool
    :ivar enabled_for_template_deployment: Property to specify whether Azure Resource Manager is
     permitted to retrieve secrets from the key vault.
    :vartype enabled_for_template_deployment: bool
    :ivar enable_soft_delete: Property to specify whether the 'soft delete' functionality is
     enabled for this key vault. If it's not set to any value(true or false) when creating new key
     vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
    :vartype enable_soft_delete: bool
    :ivar soft_delete_retention_in_days: softDelete data retention days. It accepts >=7 and <=90.
    :vartype soft_delete_retention_in_days: int
    :ivar enable_rbac_authorization: Property that controls how data actions are authorized. When
     true, the key vault will use Role Based Access Control (RBAC) for authorization of data
     actions, and the access policies specified in vault properties will be  ignored. When false,
     the key vault will use the access policies specified in vault properties, and any policy stored
     on Azure Resource Manager will be ignored. If null or not specified, the vault is created with
     the default value of false. Note that management actions are always authorized with RBAC.
    :vartype enable_rbac_authorization: bool
    :ivar create_mode: The vault's create mode to indicate whether the vault need to be recovered
     or not. Possible values include: "recover", "default".
    :vartype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
    :ivar enable_purge_protection: Property specifying whether protection against purge is enabled
     for this vault. Setting this property to true activates protection against purge for this vault
     and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The
     setting is effective only if soft delete is also enabled. Enabling this functionality is
     irreversible - that is, the property does not accept false as its value.
    :vartype enable_purge_protection: bool
    :ivar network_acls: Rules governing the accessibility of the key vault from specific network
     locations.
    :vartype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleSet
    :ivar provisioning_state: Provisioning state of the vault. Possible values include:
     "Succeeded", "RegisteringDns".
    :vartype provisioning_state: str or
     ~azure.mgmt.keyvault.v2023_07_01.models.VaultProvisioningState
    :ivar private_endpoint_connections: List of private endpoint connections associated with the
     key vault.
    :vartype private_endpoint_connections:
     list[~azure.mgmt.keyvault.v2023_07_01.models.PrivateEndpointConnectionItem]
    :ivar public_network_access: Property to specify whether the vault will accept traffic from
     public internet. If set to 'disabled' all traffic except private endpoint traffic and that that
     originates from trusted services will be blocked. This will override the set firewall rules,
     meaning that even if the firewall rules are present we will not honor the rules.
    :vartype public_network_access: str
    """

    _validation = {
        'tenant_id': {'required': True},
        'sku': {'required': True},
        'hsm_pool_resource_id': {'readonly': True},
        'private_endpoint_connections': {'readonly': True},
    }

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'access_policies': {'key': 'accessPolicies', 'type': '[AccessPolicyEntry]'},
        'vault_uri': {'key': 'vaultUri', 'type': 'str'},
        'hsm_pool_resource_id': {'key': 'hsmPoolResourceId', 'type': 'str'},
        'enabled_for_deployment': {'key': 'enabledForDeployment', 'type': 'bool'},
        'enabled_for_disk_encryption': {'key': 'enabledForDiskEncryption', 'type': 'bool'},
        'enabled_for_template_deployment': {'key': 'enabledForTemplateDeployment', 'type': 'bool'},
        'enable_soft_delete': {'key': 'enableSoftDelete', 'type': 'bool'},
        'soft_delete_retention_in_days': {'key': 'softDeleteRetentionInDays', 'type': 'int'},
        'enable_rbac_authorization': {'key': 'enableRbacAuthorization', 'type': 'bool'},
        'create_mode': {'key': 'createMode', 'type': 'str'},
        'enable_purge_protection': {'key': 'enablePurgeProtection', 'type': 'bool'},
        'network_acls': {'key': 'networkAcls', 'type': 'NetworkRuleSet'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'private_endpoint_connections': {'key': 'privateEndpointConnections', 'type': '[PrivateEndpointConnectionItem]'},
        'public_network_access': {'key': 'publicNetworkAccess', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword tenant_id: Required. The Azure Active Directory tenant ID that should be used for
         authenticating requests to the key vault.
        :paramtype tenant_id: str
        :keyword sku: Required. SKU details.
        :paramtype sku: ~azure.mgmt.keyvault.v2023_07_01.models.Sku
        :keyword access_policies: An array of 0 to 1024 identities that have access to the key vault.
         All identities in the array must use the same tenant ID as the key vault's tenant ID. When
         ``createMode`` is set to ``recover``\ , access policies are not required. Otherwise, access
         policies are required.
        :paramtype access_policies: list[~azure.mgmt.keyvault.v2023_07_01.models.AccessPolicyEntry]
        :keyword vault_uri: The URI of the vault for performing operations on keys and secrets.
        :paramtype vault_uri: str
        :keyword enabled_for_deployment: Property to specify whether Azure Virtual Machines are
         permitted to retrieve certificates stored as secrets from the key vault.
        :paramtype enabled_for_deployment: bool
        :keyword enabled_for_disk_encryption: Property to specify whether Azure Disk Encryption is
         permitted to retrieve secrets from the vault and unwrap keys.
        :paramtype enabled_for_disk_encryption: bool
        :keyword enabled_for_template_deployment: Property to specify whether Azure Resource Manager is
         permitted to retrieve secrets from the key vault.
        :paramtype enabled_for_template_deployment: bool
        :keyword enable_soft_delete: Property to specify whether the 'soft delete' functionality is
         enabled for this key vault. If it's not set to any value(true or false) when creating new key
         vault, it will be set to true by default. Once set to true, it cannot be reverted to false.
        :paramtype enable_soft_delete: bool
        :keyword soft_delete_retention_in_days: softDelete data retention days. It accepts >=7 and
         <=90.
        :paramtype soft_delete_retention_in_days: int
        :keyword enable_rbac_authorization: Property that controls how data actions are authorized.
         When true, the key vault will use Role Based Access Control (RBAC) for authorization of data
         actions, and the access policies specified in vault properties will be  ignored. When false,
         the key vault will use the access policies specified in vault properties, and any policy stored
         on Azure Resource Manager will be ignored. If null or not specified, the vault is created with
         the default value of false. Note that management actions are always authorized with RBAC.
        :paramtype enable_rbac_authorization: bool
        :keyword create_mode: The vault's create mode to indicate whether the vault need to be
         recovered or not. Possible values include: "recover", "default".
        :paramtype create_mode: str or ~azure.mgmt.keyvault.v2023_07_01.models.CreateMode
        :keyword enable_purge_protection: Property specifying whether protection against purge is
         enabled for this vault. Setting this property to true activates protection against purge for
         this vault and its content - only the Key Vault service may initiate a hard, irrecoverable
         deletion. The setting is effective only if soft delete is also enabled. Enabling this
         functionality is irreversible - that is, the property does not accept false as its value.
        :paramtype enable_purge_protection: bool
        :keyword network_acls: Rules governing the accessibility of the key vault from specific network
         locations.
        :paramtype network_acls: ~azure.mgmt.keyvault.v2023_07_01.models.NetworkRuleSet
        :keyword provisioning_state: Provisioning state of the vault. Possible values include:
         "Succeeded", "RegisteringDns".
        :paramtype provisioning_state: str or
         ~azure.mgmt.keyvault.v2023_07_01.models.VaultProvisioningState
        :keyword public_network_access: Property to specify whether the vault will accept traffic from
         public internet. If set to 'disabled' all traffic except private endpoint traffic and that that
         originates from trusted services will be blocked. This will override the set firewall rules,
         meaning that even if the firewall rules are present we will not honor the rules.
        :paramtype public_network_access: str
        """
        super(VaultProperties, self).__init__(**kwargs)
        self.tenant_id = kwargs['tenant_id']
        self.sku = kwargs['sku']
        self.access_policies = kwargs.get('access_policies', None)
        self.vault_uri = kwargs.get('vault_uri', None)
        self.hsm_pool_resource_id = None
        self.enabled_for_deployment = kwargs.get('enabled_for_deployment', None)
        self.enabled_for_disk_encryption = kwargs.get('enabled_for_disk_encryption', None)
        self.enabled_for_template_deployment = kwargs.get('enabled_for_template_deployment', None)
        self.enable_soft_delete = kwargs.get('enable_soft_delete', True)
        self.soft_delete_retention_in_days = kwargs.get('soft_delete_retention_in_days', 90)
        self.enable_rbac_authorization = kwargs.get('enable_rbac_authorization', False)
        self.create_mode = kwargs.get('create_mode', None)
        self.enable_purge_protection = kwargs.get('enable_purge_protection', None)
        self.network_acls = kwargs.get('network_acls', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.private_endpoint_connections = None
        self.public_network_access = kwargs.get('public_network_access', "enabled")


class VirtualNetworkRule(msrest.serialization.Model):
    """A rule governing the accessibility of a vault from a specific virtual network.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Required. Full resource id of a vnet subnet, such as
     '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
    :vartype id: str
    :ivar ignore_missing_vnet_service_endpoint: Property to specify whether NRP will ignore the
     check if parent subnet has serviceEndpoints configured.
    :vartype ignore_missing_vnet_service_endpoint: bool
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'ignore_missing_vnet_service_endpoint': {'key': 'ignoreMissingVnetServiceEndpoint', 'type': 'bool'},
    }

    def __init__(
        self,
        **kwargs
    ):
        """
        :keyword id: Required. Full resource id of a vnet subnet, such as
         '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'.
        :paramtype id: str
        :keyword ignore_missing_vnet_service_endpoint: Property to specify whether NRP will ignore the
         check if parent subnet has serviceEndpoints configured.
        :paramtype ignore_missing_vnet_service_endpoint: bool
        """
        super(VirtualNetworkRule, self).__init__(**kwargs)
        self.id = kwargs['id']
        self.ignore_missing_vnet_service_endpoint = kwargs.get('ignore_missing_vnet_service_endpoint', None)
