// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// <auto-generated />

using System.Runtime.InteropServices;

namespace AttestationClient;

public static class ReportStructures
{
    public static T Marshall<T>(byte[] structureContent)
    {
        GCHandle gcHandle = GCHandle.Alloc(structureContent, GCHandleType.Pinned);
        try
        {
            var data = Marshal.PtrToStructure(gcHandle.AddrOfPinnedObject(), typeof(T));
            if (data == null)
            {
                throw new ArgumentException(
                    $"Report content could not be marshalled to {typeof(T)}");
            }

            return (T)data;
        }
        finally
        {
            gcHandle.Free();
        }
    }

    /* from SEV-SNP Firmware ABI Specification from Table 21 */
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct AttestationReportV1
    {
        public uint version;
        public uint guest_svn;
        public ulong policy;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
        public byte[] family_id;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
        public byte[] image_id;

        public uint vmpl;
        public uint signature_algo;
        public ulong platform_version;
        public ulong platform_info;
        public uint report_flags;
        public uint reserved1;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
        public byte[] report_data;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] measurement;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] host_data;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] id_key_digest;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] author_key_digest;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] report_id;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] report_id_ma;

        public ulong reported_tcb;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 24)]
        public byte[] reserved2;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
        public byte[] chip_id;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 192)]
        public byte[] reserved3;

        public SnpSignature signature;
    }

    /* from SEV-SNP Firmware ABI Specification from Table 21 */
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct AttestationReportV2
    {
        public uint version;                // version no. of this attestation report. Set to 2 for this specification.
        public uint guest_svn;              // The guest SVN
        public ulong policy;                 // see table 8 - various settings
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
        public byte[] family_id;            // as provided at launch
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 16)]
        public byte[] image_id;        // as provided at launch
        public uint vmpl;                 // the request VMPL for the attestation report
        public uint signature_algo;
        public ulong platform_version;       // The install version of the firmware
        public ulong platform_info;          // information about the platform see table 22
                                             // not going to try to use bit fields for this next one. Too confusing as to which bit of the byte will be used. Make a mask if you need it
        public uint report_flags;          // 31 bits of reserved, must be zero, bottom bit indicates that the digest of the
                                           // author key is present in AUTHOR_KEY_DIGEST. Set to the value of GCTX.AuthorKeyEn.
        public uint reserved1;              // must be zero
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
        public byte[] report_data;        // Guest provided data.
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] measurement;        // measurement calculated at launch
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] host_data;          // data provided by the hypervisor at launch
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] id_key_digest;      // SHA-384 digest of the ID public key that signed the ID block provided in SNP_LAUNCH_FINISH
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 48)]
        public byte[] author_key_digest;  // SHA-384 digest of the Author public key that certified the ID key, if provided in SNP_LAUNCH_FINISH. Zeros if author_key_en is 1 (sounds backwards to me).
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] report_id;          // Report ID of this guest.
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 32)]
        public byte[] report_id_ma;       // Report ID of this guest's mmigration agent.
        public ulong reported_tcb;           // Reported TCB version used to derive the VCEK that signed this report
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 24)]
        public byte[] reserved2;          // reserved
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 64)]
        public byte[] chip_id;        // Identifier unique to the chip
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
        public byte[] committed_svn;   // The current commited SVN of the firware (version 2 report feature)
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
        public byte[] committed_version;   // The current commited version of the firware
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 8)]
        public byte[] launch_svn;      // The SVN that this guest was launched or migrated at
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 192)]
        public byte[] reserved3;         // reserved

        public Signature signature;         // Signature of this attestation report. See table 23.
    };

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct Signature
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 72)]
        public byte[] RComponent;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 72)]
        public byte[] SComponent;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 368)]
        public byte[] RSVD;
    }

    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct SnpSignature
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 72)]
        public byte[] RComponent;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 72)]
        public byte[] SComponent;

        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 368)]
        public byte[] RSVD;
    }
}
#pragma warning restore SA1307 // Accessible fields should begin with upper-case letter
#pragma warning restore SA1310 // Field names should not contain underscore
