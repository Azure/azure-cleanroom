{%- macro add_http_listener(allow_http_outbound_access) -%}
- "@type": type.googleapis.com/envoy.config.listener.v3.Listener
  name: outbound_http_listener
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 15002
  per_connection_buffer_limit_bytes: 10567840 # 10mb buffer limit.
  listener_filters:
  - name: "envoy.filters.listener.original_dst"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
  - name: "envoy.filters.listener.http_inspector"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
  filter_chains:
  - filter_chain_match:
      application_protocols: [http/1.1]
    filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config:
        '@type': "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
        stat_prefix: outbound_http_proxy
        route_config:
          name: all
          virtual_hosts:
            - name: outbound-pass-through
              domains:
                - '*'
              routes:
                - match: { prefix: "/"}
                  {% if allow_http_outbound_access -%}
                  route:
                    cluster: outbound-pass-through
                  {%- else %}
                  direct_response:
                    status: 403
                    body:
                      inline_string: "Access denied"
                  {%- endif %}
{%- if allow_http_outbound_access %}
        http_filters:
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              -- Add a request header to denote an incoming request.
              function envoy_on_request(request_handle)
                request_handle:headers():add("x-ccr-request-direction", "outbound")
              end
        - name: envoy.filters.http.dynamic_forward_proxy
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.dynamic_forward_proxy.v3.FilterConfig
            dns_cache_config:
              name: dynamic_forward_proxy_cache_config
              dns_lookup_family: V4_ONLY
        - name: envoy.filters.http.ext_proc.outbound
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
            # Not implemented by Envoy yet. Once supported it will not require a 'message_timeout'.
            # async_mode: false
            failure_mode_allow: false
            processing_mode:
              request_header_mode: "SEND"
              request_body_mode: "BUFFERED"
              request_trailer_mode: "SKIP"
              response_header_mode: "SEND"
              response_body_mode: "BUFFERED"
              response_trailer_mode: "SKIP"
            request_attributes:
              - "request.path"
              - "request.method"
              - "request.url_path"
              - "request.host"
              - "request.scheme"
              - "request.id"
              - "request.protocol"
              - "request.query"
            # TODO: for now a sufficiently large timeout until we have async mode support.
            message_timeout: 3600s
            grpc_service:
              envoy_grpc:
                cluster_name: ccr-proxy-ext-processor-outbound
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
{%- endif %}
        access_log:
          - name: envoy.file_access_log
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
              path: /mnt/telemetry/infrastructure/outbound_http_listener.log
{%- endmacro -%}