{%- macro add_http_listener(allow_http_inbound_access) -%}
- "@type": type.googleapis.com/envoy.config.listener.v3.Listener
  name: inbound_http_listener
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 15001
  per_connection_buffer_limit_bytes: 10567840 # 10mb buffer limit.
  listener_filters:
  - name: "envoy.filters.listener.original_dst"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
  - name: "envoy.filters.listener.http_inspector"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.filters.listener.http_inspector.v3.HttpInspector
  - name: "envoy.filters.listener.tls_inspector"
    typed_config:
      "@type": type.googleapis.com/envoy.extensions.filters.listener.tls_inspector.v3.TlsInspector
  filter_chains:
  - filter_chain_match:
      transport_protocol: tls
    transport_socket:
      name: envoy.transport_sockets.tls
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
        require_client_certificate: true
        common_tls_context:
          tls_params:
            tls_minimum_protocol_version: TLSv1_3
          tls_certificates:
          - certificate_chain:
              filename: certs/server-cert.pem
            private_key:
              filename: keys/server-key.pem
          validation_context:
            trust_chain_verification: ACCEPT_UNTRUSTED
    filters:
    - name: envoy.filters.network.http_connection_manager
      typed_config: 
        '@type': "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager"
        request_timeout: 300s
        stat_prefix: inbound_http_proxy
        forward_client_cert_details: ALWAYS_FORWARD_ONLY
        route_config:
          name: all
          virtual_hosts:
          - name: inbound-pass-through
            domains: ["*"]
            routes:
            - match:
                prefix: "/gov"
              route:
                cluster: inbound-pass-through
                timeout: 60s
                retry_policy:
                  num_retries: 3
              {% if allow_http_inbound_access -%}
              typed_per_filter_config:
                envoy.filters.http.ext_proc.inbound:
                  "@type": type.googleapis.com/envoy.config.route.v3.FilterConfig
                  disabled: true
            - match:
                prefix: "/"
              route:
                cluster: inbound-pass-through
                timeout: 60s
                retry_policy:
                  num_retries: 3
              typed_per_filter_config:
                envoy.filters.http.ext_proc.gov:
                  "@type": type.googleapis.com/envoy.config.route.v3.FilterConfig
                  disabled: true
              {%- endif %}
        http_filters:
        - name: envoy.filters.http.lua
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
            inline_code: |
              -- Add a request header to denote an incoming request.
              function envoy_on_request(request_handle)
                request_handle:headers():add("x-ccr-request-direction", "inbound")
              end
        - name: envoy.filters.http.ext_proc.gov
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
            # Not implemented by Envoy yet. Once supported it will not require a 'message_timeout'.
            # async_mode: false
            failure_mode_allow: false
            processing_mode:
              request_header_mode: "SEND"
              request_body_mode: "BUFFERED"
              request_trailer_mode: "SKIP"
              response_header_mode: "SEND"
              response_body_mode: "BUFFERED"
              response_trailer_mode: "SKIP"
            request_attributes:
              - "request.path"
              - "request.method"
              - "request.url_path"
              - "request.host"
              - "request.scheme"
              - "request.id"
              - "request.protocol"
              - "request.query"
            # TODO: for now a sufficiently large timeout until we have async mode support.
            message_timeout: 3600s
            grpc_service:
              envoy_grpc:
                cluster_name: ccr-proxy-ext-processor-gov
{%- if allow_http_inbound_access %}
        - name: envoy.filters.http.ext_proc.inbound
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
            # Not implemented by Envoy yet. Once supported it will not require a 'message_timeout'.
            # async_mode: false
            failure_mode_allow: false
            processing_mode:
              request_header_mode: "SEND"
              request_body_mode: "BUFFERED"
              request_trailer_mode: "SKIP"
              response_header_mode: "SEND"
              response_body_mode: "BUFFERED"
              response_trailer_mode: "SKIP"
            request_attributes:
              - "request.path"
              - "request.method"
              - "request.url_path"
              - "request.host"
              - "request.scheme"
              - "request.id"
              - "request.protocol"
              - "request.query"
            # TODO: for now a sufficiently large timeout until we have async mode support.
            message_timeout: 3600s
            grpc_service:
              envoy_grpc:
                cluster_name: ccr-proxy-ext-processor-inbound
{%- endif %}
        - name: envoy.filters.http.router
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    access_log:
      - name: envoy.file_access_log
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
          path: /mnt/telemetry/infrastructure/inbound_http_listener.log
  - filter_chain_match:
    filters:
    - name: envoy.filters.network.tcp_proxy
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
        cluster: black-hole
        stat_prefix: ingress_tcp
{%- endmacro -%}